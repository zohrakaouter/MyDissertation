@book{brambilla2017model,
	keywords = {primary},
	title={Model-driven software engineering in practice},
	author={Brambilla, Marco and Cabot, Jordi and Wimmer, Manuel},
	year={2017},
	publisher={Morgan \& Claypool Publishers}
}

@inproceedings{10.1145/1985793.1985858,
	keywords = {primary},
	author = {Hutchinson, John and Whittle, Jon and Rouncefield, Mark and Kristoffersen, Steinar},
	title = {Empirical assessment of MDE in industry},
	year = {2011},
	isbn = {9781450304450},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/1985793.1985858},
	doi = {10.1145/1985793.1985858},
	abstract = {This paper presents some initial results from a twelve-month empirical research study of model driven engineering (MDE). Using largely qualitative questionnaire and interview methods we investigate and document a range of technical, organizational and social factors that apparently influence organizational responses to MDE: specifically, its perception as a successful or unsuccessful organizational intervention. We then outline a range of lessons learned. Whilst, as with all qualitative research, these lessons should be interpreted with care, they should also be seen as providing a greater understanding of MDE practice in industry, as well as shedding light on the varied, and occasionally surprising, social, technical and organizational factors that affect success and failure. We conclude by suggesting how the next phase of the research will attempt to investigate some of these issues from a different angle and in greater depth.},
	booktitle = {Proceedings of the 33rd International Conference on Software Engineering},
	pages = {471–480},
	numpages = {10},

	location = {Waikiki, Honolulu, HI, USA},
	series = {ICSE '11}
}

@article{Bezivin2014,
	author = {B{\'{e}}zivin, Jean},
	doi = {10.1007/11877028},
	number = {January 2005},
	title = {{Model Driven Engineering : An Emerging Technical Space Model Driven Engineering : An Emerging Technical Space}},
	year = {2014}
}
@article{Bezivin2004,
	abstract = {In November 2000, the OMG (Object Management Group) made public the MDA™ (Model Driven Architecture) initiative, a particular variant of a new global trend called model engineering. The basic ideas of model engineering are germane to many other approaches such as generative programming, domain specific languages, model-integrated computing, software factories, etc. MDA may be defined as the realization of model engineering principles around a set of OMG standards like MOF (Meta Object Facility), XMI (XML Metadata Interchange), OCL (Object Constraint Language), UML (Unified Modeling Language), CWM (Common Warehouse Metamodel), SPEM (Software Process Engineering Metamodel), etc. Similarly to the basic principle “Everything is an object” that was important in the 80's to set up the object-oriented technology, we suggest here, in model engineering, that the basic principle “Everything is a model” may be key to identifying the essential characteristics of this new trend.},
	author = {B{\'{e}}zivin, Jean},
	file = {:Users/kebaili/Downloads/MON STAGE/Documentation/MDE2.pdf:pdf},
	journal = {Special Novatica Issue - UML and Model Engineering},
	keywords = {MDA,Meta Model,Model Driven Architecture,Model Driven Engineering.},
	number = {2},
	pages = {21--24},
	title = {{In search of a basic principle for Model Driven Engineering}},
	volume = {5},
	year = {2004}
}

@article{Hutchinson2011,
	abstract = {This paper presents some initial results from a twelve-month empirical research study of model driven engineering (MDE). Using largely qualitative questionnaire and interview methods we investigate and document a range of technical, organizational and social factors that apparently influence organizational responses to MDE: specifically, its perception as a successful or unsuccessful organizational intervention. We then outline a range of lessons learned. Whilst, as with all qualitative research, these lessons should be interpreted with care, they should also be seen as providing a greater understanding of MDE practice in industry, as well as shedding light on the varied, and occasionally surprising, social, technical and organizational factors that affect success and failure. We conclude by suggesting how the next phase of the research will attempt to investigate some of these issues from a different angle and in greater depth. {\textcopyright} 2011 ACM.},
	author = {Hutchinson, John and Whittle, Jon and Rouncefield, Mark and Kristoffersen, Steinar},
	doi = {10.1145/1985793.1985858},
	isbn = {9781450304450},
	issn = {02705257},
	journal = {Proceedings - International Conference on Software Engineering},
	keywords = {empirical software engineering,model driven engineering},
	pages = {471--480},
	title = {{Empirical assessment of MDE in industry}},
	year = {2011}
}
@phdthesis{khelladiPhD2016,
	author    = {Djamel E. Khelladi},
	title     = {Co-evolution of OCL constraints with evolution of metamodels.},
	school    = {Université Pierre et Marie Curie (Sorbonne universités), Paris, France},
	year      = {2016}
}

@article{Tolvanen2009,
	author = {Tolvanen, Juha Pekka and Kelly, Steven},
	doi = {10.1145/1639950.1640031},
	isbn = {9781605587660},
	journal = {Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications, OOPSLA},
	keywords = {Code generation,Domain-specific languages,Domain-specific modeling,Language workbench,Metamodeling},
	number = {June 2014},
	pages = {819--820},
	title = {{MetaEdit+: Defining and using integrated domain-specific modeling languages}},
	year = {2009}
}
@article{Boldt2006,
	author = {Boldt, Nick and Steinberg, Dave},
	pages = {1--89},
	title = {{Introduction to the Eclipse Modeling Framework}},
	url = {http://www.eclipse.org/modeling/emf/docs/presentations/EclipseCon/EclipseCon2006_EMF_Intro.pdf},
	year = {2006}
}
@article{Bezivin2005,
	abstract = {In November 2000, the OMG made public the MDA™ initiative, a particular variant of a new global trend called MDE (Model Driven Engineering). The basic ideas of MDA are germane to many other approaches such as generative programming, domain specific languages, model-integrated computing, generic model management, software factories, etc. MDA may be defined as the realization of MDE principles around a set of OMG standards like MOF, XMI, OCL, UML, CWM, SPEM, etc. MDE is presently making several promises about the potential benefits that could be reaped from a move from code-centric to model-based practices. When we observe these claims, we may wonder when they may be satisfied: on the short, medium or long term or even never perhaps for some of them. This paper tries to propose a vision of the development of MDE based on some lessons learnt in the past 30 years in the development of object technology. The main message is that a basic principle ("Everything is an object") was most helpful in driving the technology in the direction of simplicity, generality and power of integration. Similarly in MDE, the basic principle that "Everything is a model" has many interesting properties, among others the capacity to generate a realistic research agenda. We postulate here that two core relations (representation and conformance) are associated to this principle, as inheritance and instantiation were associated to the object unification principle in the class-based languages of the 80's. We suggest that this may be most useful in understanding many questions about MDE in general and the MDA approach in particular. We provide some illustrative examples. The personal position taken in this paper would be useful if it could generate a critical debate on the research directions in MDE. {\textcopyright} Springer-Verlag 2004.},
	author = {B{\'{e}}zivin, Jean},
	doi = {10.1007/s10270-005-0079-0},
	issn = {16191366},
	journal = {Software and Systems Modeling},
	keywords = {MDA,MDE,Metamodels,Models},
	number = {2},
	pages = {171--188},
	title = {{On the unification power of models}},
	volume = {4},
	year = {2005}
}
@article{Agrawal2012,
	abstract = {Indian software industry has had a phenomenal growth in the last two decades and is expected to sustain this momentum in the foreseeable future. Based on content analysis of 25 cases, the paper identifies several human resource management challenges: managing human resources in globally distributed team, shortage of software professionals having sufficient knowledge and competencies, low-skilled nature of the work, lack of well-developed HR systems and processes, high employee turnover, lack of work-life balance, and the problems associated with the use of contract employees. The paper develops a model for managing growth linking the various variables emerging from the study. {\textcopyright} 2011 Elsevier Inc.},
	author = {Agrawal, Narendra M. and Khatri, Naresh and Srinivasan, R.},
	doi = {10.1016/j.jwb.2011.04.002},
	issn = {10909516},
	journal = {Journal of World Business},
	keywords = {Globally distributed teams,Human resource management practices,IT professionals,Indian software industry,Organizational growth},
	number = {2},
	pages = {159--166},
	publisher = {Elsevier Inc.},
	title = {{Managing growth: Human resource management challenges facing the Indian software industry}},
	url = {http://dx.doi.org/10.1016/j.jwb.2011.04.002},
	volume = {47},
	year = {2012}
}

@article{Steinberg2008,
	author = {Steinberg, Dave},
	journal = {Eclipse Foundation, editor, eclipsecon},
	keywords = {Code Generation,EMF,Eclipse},
	pages = {2005--2008},
	title = {{Fundamentals of the eclipse modeling framework}},
	url = {http://www.eclipse.org/modeling/emf/docs/presentations/EclipseWorld/EclipseWorld2007.pdf},
	year = {2008}
}
@book{lientz1980software,
	title={Software Maintenance Management: A Study of the Maintenance of Computer Application Software in 487 Data Processing Organizations},
	author={Lientz, B.P. and Swanson, E.B.},
	isbn={9780201042054},
	lccn={80012154},
	url={https://books.google.fr/books?id=8a6gAAAAMAAJ},
	year={1980},
	publisher={Addison-Wesley}
}
@article{Swanson1976,
	abstract = {The area of software maintenance has been described by one author as an "iceberg." (EDP Analyzer, 1972) Much goes on here that does not currently meet the eye. In part, this is the consequence of measurement difficulties. Practitioners and researchers can benefit from an understanding of the "dimensionality" of the maintenance problem. Some measures are suggested for coming to grips with this dimensionality, and problems of utilization associated with these measures are explored.},
	author = {Swanson, E. Burton},
	file = {:Users/kebaili/Downloads/MON STAGE/Documentation/THE DIMENSIONS OF MAINTENANCE.pdf:pdf},
	issn = {02705257},
	journal = {Proceedings - International Conference on Software Engineering},
	keywords = {Performance measurement,Software maintenance},
	pages = {492--497},
	title = {{The dimensions of maintenance}},
	year = {1976}
}

@article{Brown2004,
	abstract = {Model Driven Architecture (MDA1 )is anap- proach to application modeling and generation that has received a lot of attention in recent months. Champi- oned by the Object Management Group (OMG), many organizations are now looking at the ideas of MDA as a way to organize andmanage their application solutions, tool vendors are explicitly referring to their capabilities in terms of “MDA compliance”, and the MDA lexicon of platform-specific and platform-independent models is now widely referenced in the industry. In spite of this interest and market support, there is little clear guidance on what MDA means, where we are in its evolution, what is possible with today's technology, and howto take advantage of it in practice.This paper addresses that need by providing ananalysis ofhowmodeling is used in industry today, the relevance ofMDAto today's systems, a classification ofMDA tooling support, and ex- amples of its use.The paper concludeswith a set of recom- mendations for howMDAcan be successful in practice},
	author = {Brown, Alan W.},
	doi = {10.1007/s10270-004-0061-2},
	issn = {1619-1366},
	journal = {Software and Systems Modeling},
	keywords = {complexity to the soft-,in addition to the,many of,scale and complexity of,software architecture,software design,there is also great,these efforts,uml,unified modeling language},
	number = {August 2004},
	title = {{Model driven architecture: Principles and practice}},
	year = {2004}
}


@inproceedings{Khelladi2020,
	author = {Khelladi, Djamel Eddine and Combemale, Benoit and Acher, Mathieu and Barais, Olivier and J\'{e}z\'{e}quel, Jean-Marc},
	title = {Co-Evolving Code with Evolving Metamodels},
	year = {2020},
	isbn = {9781450371216},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3377811.3380324},
	doi = {10.1145/3377811.3380324},
	abstract = {Metamodels play a significant role to describe and analyze the relations between domain concepts. They are also cornerstone to build a software language (SL) for a domain and its associated tooling. Metamodel definition generally drives code generation of a core API. The latter is further enriched by developers with additional code implementing advanced functionalities, e.g., checkers, recommenders, etc. When a SL is evolved to the next version, the metamodels are evolved as well before to re-generate the core API code. As a result, the developers added code both in the core API and the SL toolings may be impacted and thus may need to be co-evolved accordingly. Many approaches support the co-evolution of various artifacts when metamodels evolve. However, not the co-evolution of code. This paper fills this gap. We propose a semi-automatic co-evolution approach based on change propagation. The premise is that knowledge of the metamodel evolution changes can be propagated by means of resolutions to drive the code co-evolution. Our approach leverages on the abstraction level of metamodels where a given metamodel element has often different usages in the code. It supports alternative co-evaluations to meet different developers needs. Our work is evaluated on three Eclipse SL implementations, namely OCL, Modisco, and Papyrus over several evolved versions of metamodels and code. In response to five different evolved metamodels, we co-evolved 976 impacts over 18 projects.A comparison of our co-evolved code with the versioned ones shows the usefulness of our approach. Our approach was able to reach a weighted average of 87.4\% and 88.9\% respectively of precision and recall while supporting useful alternative co-evolution that developers have manually performed.},
	booktitle = {Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering},
	pages = {1496–1508},
	numpages = {13},
	location = {Seoul, South Korea},
	series = {ICSE '20}
}


@article{Herrmannsdoerfer2011,
	abstract = {Modeling languages and thus their metamodels are subject to change. When a metamodel is evolved, existing models may no longer conform to it. Manual migration of these models in response to metamodel evolution is tedious and error-prone. To significantly automate model migration, operator-based approaches provide reusable coupled operators that encapsulate both metamodel evolution and model migration. The success of an operator-based approach highly depends on the library of reusable coupled operators it provides. In this paper, we thus present an extensive catalog of coupled operators that is based both on a literature survey as well as real-life case studies. The catalog is organized according to a number of criteria to ease assessing the impact on models as well as selecting the right operator for a metamodel change at hand. {\textcopyright} 2011 Springer-Verlag Berlin Heidelberg.},
	author = {Herrmannsdoerfer, Markus and Vermolen, Sander D. and Wachsmuth, Guido},
	doi = {10.1007/978-3-642-19440-5_10},
	isbn = {9783642194399},
	issn = {03029743},
	journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	pages = {163--182},
	title = {{An extensive catalog of operators for the coupled evolution of metamodels and models}},
	volume = {6563 LNCS},
	year = {2011}
}
@article{Khelladi2016,
	abstract = {Evolution of metamodels can be represented at the finest grain by the trace of atomic changes such as add, delete, and update of elements. For many applications, like automatic correction of models when the metamodel evolves, a higher grained trace must be inferred, composed of complex changes, each one aggregating several atomic changes. Complex change detection is a challenging task since multiple sequences of atomic changes may define a single user intention and complex changes may overlap over the atomic change trace. In this paper, we propose a detection engine of complex changes that simultaneously addresses these two challenges of variability and overlap. We introduce three ranking heuristics to help users to decide which overlapping complex changes are likely to be correct. In our approach, we record the trace of atomic changes rather than computing them with the difference between the original and evolved metamodel. Thus, we have a complete and an ordered sequence of atomic changes without hidden changes. Furthermore, we consider the issue of undo operations (i.e. change canceling actions) while recording the sequence of atomic changes, and we illustrate how we cope with it. We validate our approach on 8 real case studies demonstrating its feasibility and its applicability. We observe that a full recall is always reached in all case studies and an average precision of 70.75\%. The precision is improved by the heuristics up to 91\% and 100\% in some cases.},
	author = {Khelladi, Djamel Eddine and Hebig, Regina and Bendraou, Reda and Robin, Jacques and Gervais, Marie Pierre},
	doi = {10.1016/j.is.2016.05.002},
	file = {:Users/kebaili/Downloads/MON STAGE/Detecting complex changes and refactorings during (Meta) model evolution.pdf:pdf},
	issn = {03064379},
	journal = {Information Systems},
	keywords = {Complex change,Detection,Evolution,Metamodel,Refactoring},
	pages = {220--241},
	publisher = {Elsevier},
	title = {{Detecting complex changes and refactorings during (Meta)model evolution}},
	url = {http://dx.doi.org/10.1016/j.is.2016.05.002},
	volume = {62},
	year = {2016}
}
@article{Alter2015,
	abstract = {This tutorial explains the most current version of work system theory and related ideas that were developed over several decades in an attempt to create a systems analysis and design method that could be used by business professionals. This tutorial covers: 1) work system theory (WST), 2) application of WST in various versions of the work system method (WSM), and 3) extensions of WST including work system principles, work system design spaces, a work system metamodel that reinterprets basic work system ideas in a detailed way that is more directly useful for IT-related analysis and design, linkages between WST and service systems, and application of work system ideas in a theory of workarounds and proposed theory of system interactions.},
	author = {Alter, Steven},
	doi = {10.1007/978-3-319-19069-3},
	isbn = {9783319190686},
	issn = {16113349},
	journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	keywords = {Work system,Work system framework,Work system life cycle model,Work system metamodel},
	pages = {520--521},
	title = {{Work system theory: A bridge between business and IT views of systems}},
	volume = {9097},
	year = {2015}
}


@inproceedings{williams2012searching,
	title={Searching for model migration strategies},
	author={Williams, James R and Paige, Richard F and Polack, Fiona AC},
	booktitle={Proceedings of the 6th International Workshop on Models and Evolution},
	pages={39--44},
	year={2012},
	organization={ACM}
}





@article{Jiang2013,
	abstract = {In the process of software evolution, software change information can help software developers and system analysts to get a better understanding of differential part of software. In this paper, we construct different versions of source code into abstract syntax trees, and use an improved tree matching algorithm which combines multiple string matching algorithms, bilateral best match strategy and predicate information of program to improve the match result. Also a detailed change type list is defined and all the tree editing operations will be mapped to refined program change classification. We evaluated our tree match algorithm on a medium-size project of different versions. Ten typical classes were picked as a benchmark and 456 changes were specified manually. Our method show a good performance on this benchmark with the average change number bias controlled in 1.75, and the average change number error percentage is controlled fewer than 5.38%. {\textcopyright} 2013 IEEE.},
	author = {Jiang, Lu and Zhang, Zhiyi and Zhao, Zhihong},
	doi = {10.1109/WISA.2013.42},
	file = {:Users/kebaili/Downloads/MON STAGE/AST1.pdf:pdf},
	isbn = {9781479932191},
	journal = {Proceedings - 2013 10th Web Information System and Application Conference, WISA 2013},
	keywords = {Abstract Syntax Tree,Program Differential Analysis,Software Evolution},
	pages = {180--183},
	title = {{AST based JAVA software evolution analysis}},
	year = {2013}
}

@article{pandey2011object,
	title={Object constraint language (OCL) past, present and future},
	author={Pandey, RK},
	journal={ACM SIGSOFT software engineering notes},
	volume={36},
	number={1},
	pages={1--4},
	year={2011},
	publisher={ACM New York, NY, USA}
}


@inproceedings{palsberg1998essence,
	title={The essence of the visitor pattern},
	author={Palsberg, Jens and Jay, C Barry},
	booktitle={Proceedings. The Twenty-Second Annual International Computer Software and Applications Conference (Compsac'98)(Cat. No. 98CB 36241)},
	pages={9--15},
	year={1998},
	organization={IEEE}
}




@inproceedings{Mohagheghi2009,
	abstract = {Model-Driven Engineering has been promoted for some time as the solution for the main problem software industry is facing, i.e. complexity of software development, by raising the abstraction level and introducing more automation in the process. The promises are many; among them improved software quality by increased traceability between artifacts, early defect detection, reducing manual and error-prone work and including knowledge in generators. However, in our opinion MDE is still in the early adoption phase and to be successfully adopted by industry, it must prove its superiority over other development paradigms and be supported by a rich ecosystem of stable, compatible and standardized tools. It should also not introduce more complexity than it removes. The subject of this paper is the challenges in MDE adoption from our experience of using MDE in real and research projects, where MDE has potential for success and what the key success criteria are.},
	author = {Parastoo Mohagheghi and Miguel A. Fernandez and Juan A. Martell and Mathias Fritzsche and Wasif Gilani},
	doi = {10.1007/978-3-642-01648-6_6},
	isbn = {9783642016479},
	issn = {03029743},
	journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	keywords = {Challenges,Domain-specific modeling,Model-driven engineering,Performance engineering,Traceability},
	pages = {54-59},
	title = {MDE adoption : Challenges and success criteria},
	volume = {5421},
	year = {2009},
}

@article{bruneliere2014modisco,
	title={Modisco: A model driven reverse engineering framework},
	author={Bruneliere, Hugo and Cabot, Jordi and Dup{\'e}, Gr{\'e}goire and Madiot, Fr{\'e}d{\'e}ric},
	journal={Information and Software Technology},
	volume={56},
	number={8},
	pages={1012--1032},
	year={2014},
	publisher={Elsevier}
}

@inproceedings{bruneliere2010modisco,
	title={MoDisco: a generic and extensible framework for model driven reverse engineering},
	author={Bruneliere, Hugo and Cabot, Jordi and Jouault, Fr{\'e}d{\'e}ric and Madiot, Fr{\'e}d{\'e}ric},
	booktitle={Proceedings of the IEEE/ACM international conference on Automated software engineering},
	pages={173--174},
	year={2010}
}

@inproceedings{jongeling2020towards2,
	title={Towards consistency checking between a system model and its implementation},
	author={Jongeling, Robbert and Fredriksson, Johan and Ciccozzi, Federico and Cicchetti, Antonio and Carlson, Jan},
	booktitle={International Conference on Systems Modelling and Management},
	pages={30--39},
	year={2020},
	organization={Springer}
}

@INPROCEEDINGS{6606596,
	author={Meng, Na and Kim, Miryung and McKinley, Kathryn S.},
	booktitle={2013 35th International Conference on Software Engineering (ICSE)}, 
	title={Lase: Locating and applying systematic edits by learning from examples}, 
	year={2013},
	volume={},
	number={},
	pages={502-511},
	doi={10.1109/ICSE.2013.6606596}}



@INPROCEEDINGS{8443580,
	author={Gerasimou, Simos and Kechagia, Maria and Kolovos, Dimitris and Paige, Richard and Gousios, Georgios},
	booktitle={2018 IEEE/ACM 2nd International Workshop on API Usage and Evolution (WAPI)}, 
	title={On Software Modernisation due to Library Obsolescence}, 
	year={2018},
	volume={},
	number={},
	pages={6-9},
	doi={}}

@INPROCEEDINGS{4814159,
	author={Dagenais, Barthélémy and Robillard, Martin},
	booktitle={2008 ACM/IEEE 30th International Conference on Software Engineering}, 
	title={Recommending adaptive changes for framework evolution}, 
	year={2008},
	volume={},
	number={},
	pages={481-490},
	doi={10.1145/1368088.1368154}}

@book{starfield1993model,
	title={How to model it: Problem solving for the computer age},
	author={Starfield, Anthony M and Smith, Karl and Bleloch, Andrew L},
	year={1993},
	publisher={McGraw-Hill, Inc.}
}

@inproceedings{bezivin2001towards,
	title={Towards a precise definition of the OMG/MDA framework},
	author={B{\'e}zivin, Jean and Gerb{\'e}, Olivier},
	booktitle={Automated Software Engineering, 2001.(ASE 2001). Proceedings. 16th Annual International Conference on},
	pages={273--280},
	year={2001},
	organization={IEEE}
}

@book{kleppe2003mda,
	title={MDA explained: the model driven architecture: practice and promise},
	author={Kleppe, Anneke G and Warmer, Jos B and Bast, Wim},
	year={2003},
	publisher={Addison-Wesley Professional}
}

@article{brown2004model,
	title={Model driven architecture: Principles and practice},
	author={Brown, Alan W},
	journal={Software and Systems Modeling},
	volume={3},
	number={4},
	pages={314--327},
	year={2004},
	publisher={Springer}
}


@incollection{cabot2012object,
	title={Object constraint language (OCL): a definitive guide},
	author={Cabot, Jordi and Gogolla, Martin},
	booktitle={Formal methods for model-driven engineering},
	pages={58--90},
	year={2012},
	publisher={Springer}
}

@incollection{boronat2008algebraic,
	title={An algebraic semantics for MOF},
	author={Boronat, Artur and Meseguer, Jos{\'e}},
	booktitle={Fundamental Approaches to Software Engineering},
	pages={377--391},
	year={2008},
	publisher={Springer}
}

@incollection{koch2003towards,
	title={Towards a common metamodel for the development of web applications},
	author={Koch, Nora and Kraus, Andreas},
	booktitle={Web Engineering},
	pages={497--506},
	year={2003},
	publisher={Springer}
}

@article{seidewitz2003models,
	title={What models mean},
	author={Seidewitz, Ed},
	journal={IEEE software},
	volume={20},
	number={5},
	pages={26},
	year={2003},
	publisher={IEEE Computer Society}
}

@article{bezivin2005unification,
	title={On the unification power of models},
	author={B{\'e}zivin, Jean},
	journal={Software \& Systems Modeling},
	volume={4},
	number={2},
	pages={171--188},
	year={2005},
	publisher={Springer}
}

@incollection{bezivin2006model,
	title={Model driven engineering: An emerging technical space},
	author={B{\'e}zivin, Jean},
	booktitle={Generative and transformational techniques in software engineering},
	pages={36--64},
	year={2006},
	publisher={Springer}
}

@incollection{jouault2006km3,
	title={KM3: a DSL for Metamodel Specification},
	author={Jouault, Fr{\'e}d{\'e}ric and B{\'e}zivin, Jean},
	booktitle={Formal Methods for Open Object-Based Distributed Systems},
	pages={171--185},
	year={2006},
	publisher={Springer}
}

@inproceedings{bezivin2006canonical,
	title={A canonical scheme for model composition},
	author={B{\'e}zivin, Jean and Bouzitouna, Salim and Del Fabro, Marcos Didonet and Gervais, Marie-Pierre and Jouault, Fr{\'e}d{\'e}ric and Kolovos, Dimitrios and Kurtev, Ivan and Paige, Richard F},
	booktitle={Model Driven Architecture--Foundations and Applications},
	pages={346--360},
	year={2006},
	organization={Springer}
}

@article{schmidt2006model,
	title={Model-driven engineering},
	author={Schmidt, Douglas C},
	journal={COMPUTER-IEEE COMPUTER SOCIETY-},
	volume={39},
	number={2},
	pages={25},
	year={2006},
	publisher={Citeseer}
}

@article{berardi2005reasoning,
	title={Reasoning on UML class diagrams},
	author={Berardi, Daniela and Calvanese, Diego and De Giacomo, Giuseppe},
	journal={Artificial Intelligence},
	volume={168},
	number={1},
	pages={70--118},
	year={2005},
	publisher={Elsevier}
}

@inproceedings{atkinson2012symbiotic,
	title={Symbiotic general-purpose and domain-specific languages},
	author={Atkinson, Colin and Gerbig, Ralph and Kennel, Bastian},
	booktitle={Proceedings of the 34th International Conference on Software Engineering},
	pages={1269--1272},
	year={2012},
	organization={IEEE Press}
}

@inproceedings{france2007model,
	title={Model-driven development of complex software: A research roadmap},
	author={France, Robert and Rumpe, Bernhard},
	booktitle={2007 Future of Software Engineering},
	pages={37--54},
	year={2007},
	organization={IEEE Computer Society}
}

@article{fuentes2004introduction,
	title={An introduction to UML profiles},
	author={Fuentes-Fern{\'a}ndez, Lidia and Vallecillo-Moreno, Antonio},
	journal={UML and Model Engineering},
	volume={2},
	year={2004}
}

@article{atkinson2002profiles,
	title={Profiles in a strict metamodeling framework},
	author={Atkinson, Colin and K{\"u}hne, Thomas},
	journal={Science of Computer Programming},
	volume={44},
	number={1},
	pages={5--22},
	year={2002},
	publisher={Elsevier}
}

@incollection{mezei2007optimizing,
	title={An optimizing OCL compiler for metamodeling and model transformation environments},
	author={Mezei, Gergely and Levendovszky, Tiham{\'e}r and Charaf, Hassan},
	booktitle={Software Engineering Techniques: Design for Quality},
	pages={61--71},
	year={2007},
	publisher={Springer}
}

@inproceedings{CabotG12SFM,
	author    = {Jordi, Cabot and Martin, Gogolla},
	title     = {Object Constraint Language {(OCL):} {A} Definitive Guide},
	booktitle = {12th {SFM} Bertinoro, Italy},
	pages     = {58--90},
	year      = {2012},
	crossref  = {DBLP:conf/sfm/2012},
	url       = {http://dx.doi.org/10.1007/978-3-642-30982-3_3},
	doi       = {10.1007/978-3-642-30982-3_3},
	timestamp = {Wed, 04 Jul 2012 11:18:10 +0200},
	biburl    = {http://dblp.uni-trier.de/rec/bib/conf/sfm/CabotG12},
	bibsource = {dblp computer science bibliography, http://dblp.org}
}

@article{Ashbacher2003bookreview,
	title={Book review of “The Object Constraint Language Second Edition, Getting Your Models Ready for MDA”},
	author={Charles, Ashbacher},
	journal={Journal of Object Technology},
	volume={2},
	number={6},
	pages={139--140},
	year={2003}
}

@incollection{bergmann2014translating,
	title={Translating OCL to graph patterns},
	author={Bergmann, G{\'a}bor},
	booktitle={Model-Driven Engineering Languages and Systems},
	pages={670--686},
	year={2014},
	publisher={Springer}
}


@MISC{UML241,
	author = {OMG},
	title = {Object Management Group. Unified Modeling Language (UML).},
	year = {2015},
	howpublished={\url{http://www.omg.org/spec/UML/}}
}

@MISC{BPMN2,
	author = {OMG},
	title = {Object Management Group. Business Process Model And Notation (BPMN).},
	year = {2015},
	howpublished={\url{https://www.omg.org/spec/BPMN/2.0/About-BPMN/}}
}

@MISC{OCL20,
	author = {OMG},
	title = {Object Management Group. Object Constraints Language (OCL).},
	year = {2015},
	howpublished={\url{http://www.omg.org/spec/OCL/}}
}

@MISC{MOF241,
	author = {OMG},
	title = {Object Management Group. Meta Object Facility (MOF).},
	year = {2015},
	howpublished={\url{http://www.omg.org/spec/MOF/}}
}

@MISC{QVT20,
	author = {OMG},  
	title = {Object Management Group. Query / Views / Transformations (QVT).},
	year = {2015},
	howpublished={\url{http://www.omg.org/spec/QVT/}}
}

@inproceedings{soeken2010verifying,
	title={Verifying UML/OCL models using Boolean satisfiability},
	author={Soeken, Mathias and Wille, Robert and Kuhlmann, Mirco and Gogolla, Martin and Drechsler, Rolf},
	booktitle={Proceedings of the Conference on Design, Automation and Test in Europe},
	pages={1341--1344},
	year={2010},
	organization={European Design and Automation Association}
}

@article{gogolla2007use,
	title={USE: A UML-based specification environment for validating UML and OCL},
	author={Gogolla, Martin and B{\"u}ttner, Fabian and Richters, Mark},
	journal={Science of Computer Programming},
	volume={69},
	number={1},
	pages={27--34},
	year={2007},
	publisher={Elsevier}
}

@article{gogolla2005validating,
	title={Validating UML and OCL models in USE by automatic snapshot generation},
	author={Gogolla, Martin and Bohling, J{\"o}rn and Richters, Mark},
	journal={Software \& Systems Modeling},
	volume={4},
	number={4},
	pages={386--398},
	year={2005},
	publisher={Springer}
}

@book{warmer2003object,
	title={The object constraint language: getting your models ready for MDA},
	author={Warmer, Jos B and Kleppe, Anneke G},
	year={2003},
	publisher={Addison-Wesley Professional}
}

@book{richters2002precise,
	title={A precise approach to validating UML models and OCL constraints},
	author={Richters, Mark and others},
	year={2002},
	publisher={Citeseer}
}

@incollection{gogolla1998constraints,
	title={On constraints and queries in UML},
	author={Gogolla, Martin and Richters, Mark},
	booktitle={The Unified Modeling Language},
	pages={109--121},
	year={1998},
	publisher={Springer}
}

@incollection{hamie1998reflections,
	title={Reflections on the object constraint language},
	author={Hamie, Ali and Civello, Franco and Howse, John and Kent, Stuart and Mitchell, Richard},
	booktitle={The Unified Modeling Language.{\guillemotleft}UML{\guillemotright}’98: Beyond the Notation},
	pages={162--172},
	year={1998},
	publisher={Springer}
}

@incollection{cook2002amsterdam,
	title={The Amsterdam manifesto on OCL},
	author={Cook, Steve and Kleppe, Anneke and Mitchell, Richard and Rumpe, Bernhard and Warmer, Jos and Wills, Alan},
	booktitle={Object Modeling with the OCL},
	pages={115--149},
	year={2002},
	publisher={Springer}
}

@incollection{richters2002ocl,
	title={OCL: Syntax, semantics, and tools},
	author={Richters, Mark and Gogolla, Martin},
	booktitle={Object Modeling with the OCL},
	pages={42--68},
	year={2002},
	publisher={Springer}
}

@incollection{hennicker2002precise,
	title={On the precise meaning of OCL constraints},
	author={Hennicker, Rolf and Hussmann, Heinrich and Bidoit, Michel},
	booktitle={Object Modeling with the OCL},
	pages={69--84},
	year={2002},
	publisher={Springer}
}

@inproceedings{dzidek2005lessons,
	title={Lessons learned from developing a dynamic OCL constraint enforcement tool for Java},
	author={Dzidek, Wojciech J and Briand, Lionel C and Labiche, Yvan},
	booktitle={Satellite Events at the MoDELS 2005 Conference},
	pages={10--19},
	year={2005},
	organization={Springer}
}

@inproceedings{briand2004controlled,
	title={A controlled experiment on the impact of the object constraint language in UML-based maintenance},
	author={Briand, Lionel C and Labiche, Yvan and Yan, HD and Di Penta, Massimiliano},
	booktitle={Software Maintenance, 2004. Proceedings. 20th IEEE International Conference on},
	pages={380--389},
	year={2004},
	organization={IEEE}
}

@incollection{moiseev2009generating,
	title={Generating assertion code from OCL: A transformational approach based on similarities of implementation languages},
	author={Moiseev, Rodion and Hayashi, Shinpei and Saeki, Motoshi},
	booktitle={Model Driven Engineering Languages and Systems},
	pages={650--664},
	year={2009},
	publisher={Springer}
}

@article{cheon2008aspect,
	title={An aspect-based approach to checking design constraints at run-time},
	author={Cheon, Yoonsik and Avila, Carmen and Roach, Steve and Munoz, Cuauhtemoc and Estrada, Neith and Fierro, Valeria and Romo, Jessica},
	year={2008}
}

@article{cheon2009checking,
	title={Checking design constraints at run-time using OCL and AspectJ},
	author={Cheon, Yoonsik and Avila, Carmen and Roach, Steve and Munoz, Cuauhtemoc},
	year={2009}
}

@inproceedings{cheon2010automating,
	title={Automating Java program testing using OCL and AspectJ},
	author={Cheon, Yoonsik and Avila, Carmen},
	booktitle={Information Technology: New Generations (ITNG), 2010 Seventh International Conference on},
	pages={1020--1025},
	year={2010},
	organization={IEEE}
}

@inproceedings{ziemann2002extension,
	title={An extension of OCL with temporal logic},
	author={Ziemann, Paul and Gogolla, Martin},
	booktitle={Critical Systems Development with UML--Proceedings of the UML},
	volume={2},
	pages={53--62},
	year={2002},
	organization={Citeseer}
}

@inproceedings{ziemann2003ocl,
	title={OCL extended with temporal logic},
	author={Ziemann, Paul and Gogolla, Martin},
	booktitle={Perspectives of System Informatics},
	pages={351--357},
	year={2003},
	organization={Springer}
}

@incollection{kanso2012temporal,
	title={Temporal constraint support for ocl},
	author={Kanso, Bilal and Taha, Safouan},
	booktitle={Software Language Engineering},
	pages={83--103},
	year={2012},
	publisher={Springer}
}

@inproceedings{lehman1997metrics,
	title={Metrics and laws of software evolution-the nineties view},
	author={Lehman, Meir M and Ramil, Juan F and Wernick, Paul D and Perry, Dewayne E and Turski, Wladyslaw M},
	booktitle={Software Metrics Symposium, 1997. Proceedings., Fourth International},
	pages={20--32},
	year={1997},
	organization={IEEE}
}

@book{lehman1978laws,
	title={Laws of program evolution-rules and tools for programming management},
	author={Lehman, Meir M},
	year={1978}
}

@article{lehman1979understanding,
	title={On understanding laws, evolution, and conservation in the large-program life cycle},
	author={Lehman, Meir M},
	journal={Journal of Systems and Software},
	volume={1},
	pages={213--221},
	year={1979},
	publisher={Elsevier}
}

@incollection{lehman1996laws,
	title={Laws of software evolution revisited},
	author={Lehman, Manny M},
	booktitle={Software process technology},
	pages={108--124},
	year={1996},
	publisher={Springer}
}

@book{mens2008introduction,
	title={Introduction and roadmap: History and challenges of software evolution},
	author={Mens, Tom},
	year={2008},
	publisher={Springer}
}

@article{lehman2003software,
	title={Software evolution—background, theory, practice},
	author={Lehman, Meir M and Ramil, Juan F},
	journal={Information Processing Letters},
	volume={88},
	number={1},
	pages={33--44},
	year={2003},
	publisher={Elsevier}
}

@article{chapin2001types,
	title={Types of software evolution and software maintenance},
	author={Chapin, Ned and Hale, Joanne E and Khan, Khaled Md and Ramil, Juan F and Tan, Wui-Gee},
	journal={Journal of software maintenance and evolution: Research and Practice},
	volume={13},
	number={1},
	pages={3--30},
	year={2001},
	publisher={Wiley Online Library}
}

@inproceedings{favre2005languages,
	title={Languages evolve too! Changing the Software Time Scale},
	author={Favre, Jean-Marie},
	booktitle={Eighth International Workshop on Principles of Software Evolution {IWPSE}},
	pages={33--44},
	year={2005},
	organization={IEEE}
}

@article {buckley2005towards,
	author = {Buckley, Jim and Mens, Tom and Zenger, Matthias and Rashid, Awais and Kniesel, Günter},
	title = {Towards a taxonomy of software change},
	journal = {Journal of Software Maintenance and Evolution: Research and Practice},
	volume = {17},
	number = {5},
	publisher = {John Wiley & Sons, Ltd.},
	issn = {1532-0618},
	url = {http://dx.doi.org/10.1002/smr.319},
	doi = {10.1002/smr.319},
	pages = {309--332},
	keywords = {characterization, software evolution tools, refactoring browser, CVS, eLiza},
	year = {2005}
}

@inproceedings{swanson1976dimensions,
	title={The dimensions of maintenance},
	author={Swanson, E Burton},
	booktitle={Proceedings of the 2nd international conference on Software engineering},
	pages={492--497},
	year={1976},
	organization={IEEE Computer Society Press}
}


@incollection{liebel2014assessing,
	title={Assessing the state-of-practice of model-based engineering in the embedded systems domain},
	author={Liebel, Grischa and Marko, Nadja and Tichy, Matthias and Leitner, Andrea and Hansson, J{\"o}rgen},
	booktitle={Model-Driven Engineering Languages and Systems},
	pages={166--182},
	year={2014},
	publisher={Springer}
}


@inproceedings{shirtz2007adopting,
	title={Adopting model driven development in a large financial organization},
	author={Shirtz, Dov and Kazakov, Michael and Shaham-Gafni, Yael},
	booktitle={Model Driven Architecture-Foundations and Applications},
	pages={172--183},
	year={2007},
	organization={Springer}
}


@inproceedings{mohagheghi2008proof,
	title={Where is the proof?-a review of experiences from applying mde in industry},
	author={Mohagheghi, Parastoo and Dehlen, Vegard},
	booktitle={Model Driven Architecture--Foundations and Applications},
	pages={432--443},
	year={2008},
	organization={Springer}
}


@article{hailpern2006model,
	title={Model-driven development: The good, the bad, and the ugly},
	author={Hailpern, Brent and Tarr, Peri},
	journal={IBM systems journal},
	volume={45},
	number={3},
	pages={451},
	year={2006},
	publisher={International Business Machines Corporation}
}

@inproceedings{garcia2014Caise,
	title={An adapter-based approach to co-evolve generated sql in model-to-text transformations},
	author={Garc{\'\i}a, Jokin and D{\'\i}az, Oscar and Cabot, Jordi},
	booktitle={Advanced Information Systems Engineering},
	pages={518--532},
	year={2014},
	organization={Springer}
}

@InProceedings{10.1007/978-3-642-36089-3_9,
	author="Garc{\'i}a, Jokin
	and Diaz, Oscar
	and Azanza, Maider",
	editor="Czarnecki, Krzysztof
	and Hedin, G{\"o}rel",
	title="Model Transformation Co-evolution: A Semi-automatic Approach",
	booktitle="Software Language Engineering",
	year="2013",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="144--163",
	abstract="Model transformations are precious and effortful outcomes of Model-Driven Engineering. As any other artifact, transformations are also subject to evolution forces. Not only are they affected by changes to transformation requirements, but also by the changes to the associated metamodels. Manual co-evolution of transformations after these metamodel changes is cumbersome and error-prone. In this setting, this paper introduces a semi-automatic process for the co-evolution of transformations after metamodel evolution. The process is divided in two main stages: at the detection stage, the changes to the metamodel are detected and classified, while the required actions for each type of change are performed at the co-evolution stage. The contributions of this paper include the automatic co-evolution of breaking and resolvable changes and the assistance to the transformation developer to aid in the co-evolution of breaking and unresolvable changes. The presented process is implemented for ATL in the CO-URE prototype.",
	isbn="978-3-642-36089-3"
}

@inproceedings{wachsmuth2007metamodel,
	title={Metamodel adaptation and model co-adaptation},
	author={Wachsmuth, Guido},
	booktitle={ECOOP},
	volume={7},
	pages={600--624},
	year={2007},
	organization={Springer}
}
@inproceedings{herrmannsdoerfer2009cope,
	title={COPE-Automating Coupled Evolution of Metamodels and Models.},
	author={Herrmannsdoerfer, Markus and Benz, Sebastian and Juergens, Elmar},
	booktitle={ECOOP},
	volume={9},
	pages={52--76},
	year={2009},
	organization={Springer}
}

@inproceedings{cicchetti2008automating,
	title={Automating co-evolution in model-driven engineering},
	author={Cicchetti, Antonio and Di Ruscio, Davide and Eramo, Romina and Pierantonio, Alfonso},
	booktitle={2008 12th International IEEE enterprise distributed object computing conference},
	pages={222--231},
	year={2008},
	organization={IEEE}
}

@incollection{markovic_refactoring_2005,
	title={Refactoring OCL annotated UML class diagrams},
	author={Markovi{\'c}, Slavi{\v{s}}a and Baar, Thomas},
	booktitle={Model Driven Engineering Languages and Systems},
	pages={280--294},
	year={2005},
	publisher={Springer}
}


@incollection{herrmannsdoerfer_extensive_2011,
	title = {An Extensive Catalog of Operators for the Coupled Evolution of Metamodels and Models},
	copyright = {©2011 Springer Berlin Heidelberg},
	isbn = {978-3-642-19439-9, 978-3-642-19440-5},
	booktitle = {Software Language Engineering},
	author = {Herrmannsdoerfer, Markus and Vermolen, Sander D. and Wachsmuth, Guido},
	editor = {Malloy and Staab and Brand},
	month = jan,
	year = {2011},
	pages = {163--182},
	publisher={Springer}
}


@inproceedings{garces2009managing,
	title={Managing model adaptation by precise detection of metamodel changes},
	author={Garc{\'e}s, Kelly and Jouault, Fr{\'e}d{\'e}ric and Cointe, Pierre and B{\'e}zivin, Jean},
	booktitle={Model Driven Architecture-Foundations and Applications: 5th European Conference, ECMDA-FA 2009, Enschede, The Netherlands, June 23-26, 2009. Proceedings 5},
	pages={34--49},
	year={2009},
	organization={Springer}
}

@inproceedings{xing2006refactoring,
	title={Refactoring detection based on umldiff change-facts queries},
	author={Xing, Zhenchang and Stroulia, Eleni},
	booktitle={Reverse Engineering, 2006. WCRE'06. 13th Working Conference on},
	pages={263--274},
	year={2006},
	organization={IEEE}
}

@inproceedings{moghadam2012automated,
	title={Automated refactoring using design differencing},
	author={Moghadam, Iman Hemati and Cinneide, Mel O},
	booktitle={Software Maintenance and Reengineering (CSMR), 2012 16th European Conference on},
	pages={43--52},
	year={2012},
	organization={IEEE}
}

@MISC{Rijsbergen1979,
	author = {Rijsbergen, C.J.V.},
	title = {Information Retrieval. Butterworths},
	year = {1979}
}

@article{morisio2002success,
	title={Success and failure factors in software reuse},
	author={Morisio, Maurizio and Ezran, Michel and Tully, Colin},
	journal={Software Engineering, IEEE Transactions on},
	volume={28},
	number={4},
	pages={340--357},
	year={2002},
	publisher={IEEE}
}

@incollection{hemel2008code,
	title={Code generation by model transformation},
	author={Hemel, Zef and Kats, Lennart CL and Visser, Eelco},
	booktitle={{ICMT}},
	pages={183--198},
	year={2008},
	publisher={Springer}
}

@inproceedings{aichernig2005test,
	title={Test case generation by OCL mutation and constraint solving},
	author={Aichernig, Bernhard K and Salas, Percy Antonio Pari},
	booktitle={Quality Software, 2005.(QSIC 2005). Fifth International Conference on},
	pages={64--71},
	year={2005},
	organization={IEEE}
}

@inproceedings{hassam2011assistance,
	title={Assistance system for OCL constraints adaptation during metamodel evolution},
	author={Hassam, Kahina and Sadou, Salah and Gloahec, Vincent Le and Fleurquin, R{\'e}gis},
	booktitle={Software Maintenance and Reengineering (CSMR), 15th European Conference on},
	pages={151--160},
	year={2011},
	organization={IEEE}
}

@inproceedings{demuth_automatically_2012,
	title={Automatically generating and adapting model constraints to support co-evolution of design models},
	author={Demuth, Andreas and Lopez-Herrejon, Roberto Erick and Egyed, Alexander},
	booktitle={The 27th IEEE/ACM ASE},
	pages={302--305},
	year={2012}
}

@incollection{demuth_supporting_2013,
	title={Supporting the co-evolution of metamodels and constraints through incremental constraint management},
	author={Demuth, Andreas and Lopez-Herrejon, Roberto E and Egyed, Alexander},
	booktitle={Model-Driven Engineering Languages and Systems},
	pages={287--303},
	year={2013},
	publisher={Springer}
}

@inproceedings{kusel2015systematic,
	title={Systematic Co-Evolution of OCL Expressions},
	author={Kusel, Angelika and Etzlstorfer, Juergen and Kapsammer, Elisabeth and Retschitzegger, Werner and Schoenboeck, Johannes and Schwinger, Wieland and Wimmer, Manuel},
	booktitle={11th {APCCM 2015}},
	volume={27},
	pages={30},
	year={2015}
}

@article{schneidewind1987state,
	title={The state of software maintenance},
	author={Schneidewind, Norman F.},
	journal={IEEE Transactions on Software Engineering},
	volume={13},
	number={3},
	pages={303},
	year={1987},
	publisher={IEEE Computer Society}
}

@inproceedings{bennett2000software,
	title={Software maintenance and evolution: a roadmap},
	author={Bennett, Keith H and Rajlich, V{\'a}clav T},
	booktitle={Proceedings of the Conference on the Future of Software Engineering},
	pages={73--87},
	year={2000},
	organization={ACM}
}

@inproceedings{godfrey2008past,
	title={The past, present, and future of software evolution},
	author={Godfrey, Michael W and German, Daniel M},
	booktitle={Frontiers of Software Maintenance, 2008. FoSM 2008.},
	pages={129--138},
	year={2008},
	organization={IEEE}
}

@article{vigder2001evolution,
	title={The evolution, maintenance, and management of component-based systems},
	author={Vigder, Mark},
	journal={Component-Based Software Engineering: Putting the Pieces Together},
	pages={527--539},
	year={2001},
	publisher={Citeseer}
}

@phdthesis{opdyke1992refactoring,
	title={Refactoring object-oriented frameworks},
	author={Opdyke, William F},
	year={1992},
	school={University of Illinois at Urbana-Champaign}
}

@book{arnold1986introduction,
	title={An introduction to software restructuring},
	author={Arnold, Robert S},
	year={1986},
	publisher={IEEE Computer Society Press, Washington, DC}
}

@article{mens2004survey,
	title={A survey of software refactoring},
	author={Mens, Tom and Tourw{\'e}, Tom},
	journal={Software Engineering, IEEE Transactions on},
	volume={30},
	number={2},
	pages={126--139},
	year={2004},
	publisher={IEEE}
}

@incollection{sunye2001refactoring,
	title={Refactoring UML models},
	author={Suny{\'e}, Gerson and Pollet, Damien and Le Traon, Yves and J{\'e}z{\'e}quel, Jean-Marc},
	booktitle={{UML}2001—The Unified Modeling Language. Modeling Languages, Concepts, and Tools},
	pages={134--148},
	year={2001},
	publisher={Springer}
}


@incollection{rose2010comparison,
	title={A comparison of model migration tools},
	author={Rose, Louis M and Herrmannsdoerfer, Markus and Williams, James R and Kolovos, Dimitrios S and Garc{\'e}s, Kelly and Paige, Richard F and Polack, Fiona AC},
	booktitle={MODELS},
	pages={61--75},
	year={2010},
	publisher={Springer}
}

@CONFERENCE {ReginaApsec2015,
	author    = {Regina Hebig and Djamel Eddine Khelladi and Reda Bendraou},
	title     = {Surveying the Corpus of Model Resolution Strategies for Metamodel Evolution},
	booktitle = {The 22nd Asia-Pacific Software Engineering Conference {APSEC}},
	year      = {2015}
}

@article{demuth2015constraint,
	title={Constraint-driven modeling through transformation},
	author={Demuth, Andreas and Lopez-Herrejon, Roberto Erick and Egyed, Alexander},
	journal={Software \& Systems Modeling},
	volume={14},
	number={2},
	pages={573--596},
	year={2015},
	publisher={Springer}
}

@article{demuth2016co,
	title={Co-evolution of metamodels and models through consistent change propagation},
	author={Demuth, Andreas and Riedl-Ehrenleitner, Markus and Lopez-Herrejon, Roberto E and Egyed, Alexander},
	journal={Journal of Systems and Software},
	volume={111},
	pages={281--297},
	year={2016},
	publisher={Elsevier}
}

@inproceedings{toulme2006presentation,
	title={Presentation of EMF compare utility},
	author={Toulm{\'e}, Antoine and Inc, I},
	booktitle={Eclipse Modeling Symposium},
	pages={1--8},
	year={2006}
}

@inproceedings{xing2005umldiff,
	title={UMLDiff: an algorithm for object-oriented design differencing},
	author={Xing, Zhenchang and Stroulia, Eleni},
	booktitle={Proceedings of the 20th IEEE/ACM international Conference on Automated software engineering},
	pages={54--65},
	year={2005},
	organization={ACM}
}

@article{lin2007dsmdiff,
	title={DSMDiff: a differentiation tool for domain-specific models},
	author={Lin, Yuehua and Gray, Jeff and Jouault, Fr{\'e}d{\'e}ric},
	journal={European Journal of Information Systems},
	volume={16},
	number={4},
	pages={349--361},
	year={2007},
	publisher={Nature Publishing Group}
}


@inproceedings{di2011needed,
	title={What is needed for managing co-evolution in mde?},
	author={Di Ruscio, Davide and Iovino, Ludovico and Pierantonio, Alfonso},
	booktitle={Proceedings of the 2nd International Workshop on Model Comparison in Practice},
	pages={30--38},
	year={2011},
	organization={ACM}
}

@article{levendovszky2014semi,
	title={A semi-formal description of migrating domain-specific models with evolving domains},
	author={Levendovszky, Tihamer and Balasubramanian, Daniel and Narayanan, Anantha and Shi, Feng and van Buskirk, Chris and Karsai, Gabor},
	journal={Software \& Systems Modeling},
	volume={13},
	number={2},
	pages={807--823},
	year={2014},
	publisher={Springer}
}

@inproceedings{blanc2008detecting,
	title={Detecting model inconsistency through operation-based model construction},
	author={Blanc, Xavier and Mounier, Isabelle and Mougenot, Alix and Mens, Tom},
	booktitle={Software Engineering, 2008. ICSE'08. ACM/IEEE 30th International Conference on},
	pages={511--520},
	year={2008},
	organization={IEEE}
}

@incollection{cabot2004automatic,
	title={Automatic integrity constraint evolution due to model subtract operations},
	author={Cabot, Jordi and Conesa, Jordi},
	booktitle={Conceptual Modeling for Advanced Application Domains},
	pages={350--362},
	year={2004},
	publisher={Springer}
}

@inproceedings{buttner2005towards,
	title={Towards transformation of integrity constraints and database states},
	author={B{\"u}ttner, Fabian and Bauerdick, Hanna and Gogolla, Martin},
	booktitle={Database and Expert Systems Applications, 2005. Proceedings. Sixteenth International Workshop on},
	pages={823--828},
	year={2005},
	organization={IEEE}
}

@article{cabot2007transformation,
	title={Transformation techniques for OCL constraints},
	author={Cabot, Jordi and Teniente, Ernest},
	journal={Science of Computer Programming},
	volume={68},
	number={3},
	pages={179--195},
	year={2007},
	publisher={Elsevier}
}


@article{kuselsystematic,
	title={A Systematic Taxonomy of Metamodel Evolution Impacts on OCL Expressions},
	author={Kusel, Angelika and Etzlstorfer, Juergen and Kapsammer, Elisabeth and Retschitzegger, Werner and Schoenboeck, Johannes and Schwinger, Wieland and Wimmer, Manuel},
	booktitle={Workshop on Models and Evolution at {MODELS}},
	year={ME@MODELS, 2015}
}



@article{clarke1996formal,
	title={Formal methods: State of the art and future directions},
	author={Clarke, Edmund M and Wing, Jeannette M},
	journal={ACM Computing Surveys (CSUR)},
	volume={28},
	number={4},
	pages={626--643},
	year={1996},
	publisher={ACM}
}

@book{clarke1999model,
	title={Model checking},
	author={Clarke, Edmund M and Grumberg, Orna and Peled, Doron},
	year={1999},
	publisher={MIT press}
}

@book{volter2013model,
	title={Model-driven software development: technology, engineering, management},
	author={Volter, Markus and Stahl, Thomas and Bettin, Jorn and Haase, Arno and Helsen, Simon},
	year={2013},
	publisher={John Wiley \& Sons}
}

@incollection{cabot2007declarative,
	title={From declarative to imperative UML/OCL operation specifications},
	author={Cabot, Jordi},
	booktitle={Conceptual Modeling-ER 2007},
	pages={198--213},
	year={2007},
	publisher={Springer}
}

@article{rose2014epsilon,
	title={Epsilon Flock: a model migration language},
	author={Rose, Louis M and Kolovos, Dimitrios S and Paige, Richard F and Polack, Fiona AC and Poulding, Simon},
	journal={Software \& Systems Modeling},
	volume={13},
	number={2},
	pages={735--755},
	year={2014},
	publisher={Springer}
}

@book{wohlin2012experimentation,
	title={Experimentation in software engineering},
	author={Wohlin, Claes and Runeson, Per and H{\"o}st, Martin and Ohlsson, Magnus C and Regnell, Bj{\"o}rn and Wessl{\'e}n, Anders},
	year={2012},
	publisher={Springer Science \& Business Media}
}

@MISC{MDTOCL,
	author = {MDT},
	title = {Model Development Tools. Object Constraints Language (OCL).},
	year = {2015},
	howpublished={\url{http://www.eclipse.org/modeling/mdt/?project=ocl}}
}

@MISC{MDTPapyrus,
	author = {MDT},
	title = {Model Development Tools. Papyrus.},
	year = {2015},
	howpublished={\url{http://www.eclipse.org/modeling/mdt/?project=papyrus}}
}

@MISC{MDTModisco,
	author = {MDT},
	title = {Model Development Tools. MoDisco.},
	year = {2015},
	howpublished={\url{http://www.eclipse.org/modeling/mdt/?project=modisco}}
}

@MISC{GMF,
	author = {GMP},
	title = {Graphical Modeling Project. Graphical Modeling Framework (GMF).},
	year = {2015},
	howpublished={\url{http://www.eclipse.org/modeling/gmp/}}
}

@MISC{OMG,
	author = {OMG},
	title = {Object Management Group.},
	year = {2015},
	howpublished={\url{http://www.omg.org/spec/}}
}

@MISC{SMM,
	author = {OMG},
	title = {Structured Metrics Metamodel.},
	year = {2015},
	howpublished={\url{http://www.omg.org/spec/SMM/}}
}


@MISC{UPDM,
	author = {OMG},
	title = {Unified Profile for the Department of Defense Architecture Framework (DoDAF) and the Ministry of Defence Architecture Framework (MODAF).},
	year = {2015},
	howpublished={\url{http://www.omg.org/spec/UPDM/}}
}

@MISC{NIEM,
	author = {OMG},
	title = {UML Profile for National Information Exchange Model.},
	year = {2015},
	howpublished={\url{http://www.omg.org/spec/NIEM-UML/}}
}

@MISC{EXPRESS,
	author = {OMG},
	title = {Reference Metamodel for the EXPRESS Information Modeling Language.},
	year = {2015},
	howpublished={\url{http://www.omg.org/spec/EXPRESS/}}
}

@MISC{ReqIF,
	author = {OMG},
	title = {Requirements Interchange Format.},
	year = {2015},
	howpublished={\url{http://www.omg.org/spec/ReqIF/}}
}

@inproceedings{jouault2005transforming,
	title={Transforming models with ATL},
	author={Jouault, Fr{\'e}d{\'e}ric and Kurtev, Ivan},
	booktitle={satellite events at the MoDELS 2005 Conference},
	pages={128--138},
	year={2005},
	organization={Springer}
}

@incollection{kolovos2008epsilon,
	title={The epsilon transformation language},
	author={Kolovos, Dimitrios S and Paige, Richard F and Polack, Fiona AC},
	booktitle={Theory and practice of model transformations},
	pages={46--60},
	year={2008},
	publisher={Springer}
}


@incollection{herrmannsdoerfer_language_2010,
	title = {Language Evolution in Practice: The History of {GMF}},
	copyright = {©2010 Springer-Verlag Berlin Heidelberg},
	isbn = {978-3-642-12106-7, 978-3-642-12107-4},
	shorttitle = {Language Evolution in Practice},
	urldate = {2014-04-30},
	booktitle = {Software Language Engineering},
	author = {Herrmannsdoerfer, Markus and Ratiu, Daniel and Wachsmuth, Guido},
	editor = {Brand, Mark van den and Gasevic, Dragan and Gray, Jeff},
	month = jan,
	year = {2010},
	keywords = {Logics and Meanings of Programs, Management of Computing and Information Systems, Programming Languages, Compilers, Interpreters, Simulation and Modeling, Software engineering},
	pages = {3--22}
}

@article{garces2014adapting,
	title={Adapting transformations to metamodel changes via external transformation composition},
	author={Garc{\'e}s, Kelly and Vara, Juan M and Jouault, Fr{\'e}d{\'e}ric and Marcos, Esperanza},
	journal={Software \& Systems Modeling},
	volume={13},
	number={2},
	pages={789--806},
	year={2014},
	publisher={Springer}
}

@inproceedings{bendraou2012support,
	title={Support for Deviation Detections in the Context of Multi-Viewpoint-Based Development Processes.},
	author={Bendraou, Reda and da Silva, Marcos Aur{\'e}lio Almeida and Gervais, Marie-Pierre and Blanc, Xavier},
	booktitle={CAiSE},
	pages={23--31},
	year={2012}
}

@inproceedings{blanc2009incremental,
	title={Incremental detection of model inconsistencies based on model operations},
	author={Blanc, Xavier and Mougenot, Alix and Mounier, Isabelle and Mens, Tom},
	booktitle={CAiSE},
	pages={32--46},
	year={2009},
	organization={Springer}
}

@inproceedings{da2011deviation,
	title={Deviation management during process execution},
	author={da Silva, Marcos Aurelio Almeida and Blanc, Xavier and Bendraou, Reda},
	booktitle={26th IEEE/ACM ASE},
	pages={528--531},
	year={2011}
}

@phdthesis{mougenot2010praxis,
	title={Praxis: Detection of inconsistency within distributed models},
	author={Mougenot, Alix},
	year={2010},
	school={Paris 6}
}

@inproceedings{Kessentini2016automated,
	title={Automated Metamodel/Model Co-Evolution using a Multi-Objective Optimization Approach},
	author={Kessentini, Wael and Sahraoui, Houari and Wimmer, Manuel},
	booktitle={12th ECMFA},
	year={2016}
}

@book{steinberg2008emf,
	title={EMF: eclipse modeling framework},
	author={Steinberg, Dave and Budinsky, Frank and Merks, Ed and Paternostro, Marcelo},
	year={2008},
	publisher={Pearson Education}
}

@inproceedings{bruneliere2015lightweight,
	title={On Lightweight Metamodel Extension to Support Modeling Tools Agility},
	author={Bruneliere, Hugo and Garcia, Jokin and Desfray, Philippe and Khelladi, Djamel Eddine and Hebig, Regina and Bendraou, Reda and Cabot, Jordi},
	booktitle={European Conference on Modelling Foundations and Applications},
	pages={62--74},
	year={2015},
	organization={Springer}
}

@inproceedings{khelladi2016supporting,
	title={Supporting the co-adaption of process properties},
	author={Khelladi, Djamel Eddine and Bendraou, Reda and Hebig, Regina and Gervais, Marie-Pierre},
	booktitle={Proceedings of the International Workshop on Software and Systems Process},
	pages={1--5},
	year={2016},
	organization={ACM}
}

@inproceedings{khelladi2015framework,
	title={A framework to formally verify conformance of a software process to a software method},
	author={Khelladi, Djamel-Eddine and Bendraou, Reda and Baarir, Souheib and Laurent, Yoann and Gervais, Marie-Pierre},
	booktitle={The 30th Symposium on Applied Computing},
	pages={1518--1525},
	year={2015},
	organization={ACM}
}

@article{khelladi2016detecting,
	title={Detecting complex changes and refactorings during (meta) model evolution},
	author={Khelladi, Djamel Eddine and Hebig, Regina and Bendraou, Reda and Robin, Jacques and Gervais, Marie-Pierre},
	journal={Information Systems},
	year={2016},
	publisher={Elsevier}
}

@inproceedings{khelladi2015detecting,
	title={Detecting complex changes during metamodel evolution},
	author={Khelladi, Djamel Eddine and Hebig, Regina and Bendraou, Reda and Robin, Jacques and Gervais, Marie-Pierre},
	booktitle={CAISE},
	pages={263--278},
	year={2015},
	organization={Springer}
}

@inproceedings{khelladi2016ad,
	title={Ad-room: a tool for automatic detection of refactorings in object-oriented models},
	author={Khelladi, Djamel Eddine and Bendraou, Reda and Gervais, Marie-Pierre},
	booktitle={ICSE Companion},
	pages={617--620},
	year={2016},
	organization={ACM}
}

@inproceedings{khelladi2016metamodel,
	title={Metamodel and constraints co-evolution: A semi automatic maintenance of ocl constraints},
	author={Khelladi, Djamel Eddine and Hebig, Regina and Bendraou, Reda and Robin, Jacques and Gervais, Marie-Pierre},
	booktitle={International Conference on Software Reuse},
	pages={333--349},
	year={2016},
	organization={Springer}
}



@book{witten2005data,
	title={Data Mining: Practical machine learning tools and techniques},
	author={Witten, Ian H and Frank, Eibe},
	year={2005},
	publisher={Morgan Kaufmann}
}

@book{deb2001multi,
	title={Multi-objective optimization using evolutionary algorithms},
	author={Deb, Kalyanmoy},
	volume={16},
	year={2001},
	publisher={John Wiley \& Sons}
}

@incollection{deb2014multi,
	title={Multi-objective optimization},
	author={Deb, Kalyanmoy},
	booktitle={Search methodologies},
	pages={403--449},
	year={2014},
	publisher={Springer}
}

@inproceedings{schoenboeck2014care,
	title={CARE: A Constraint-based Approach for Re-establishing Conformance-relationships},
	author={Schoenboeck, Johannes and Kusel, Angelika and Etzlstorfer, Juergen and Kapsammer, Elisabeth and Schwinger, Wieland and Wimmer, Manuel and Wischenbart, Martin},
	booktitle={Proceedings of the Tenth Asia-Pacific Conference on Conceptual Modelling-Volume 154},
	pages={19--28},
	year={2014},
	organization={Australian Computer Society, Inc.}
}


@article{kitchenham2004procedures,
	title={Procedures for performing systematic reviews},
	author={Kitchenham, Barbara},
	journal={Keele, UK, Keele University},
	volume={33},
	number={2004},
	pages={1--26},
	year={2004}
}


@inproceedings{correa2004applying,
	title={Applying refactoring techniques to UML/OCL models},
	author={Correa, Alexandre and Werner, Cl{\'a}udia},
	booktitle={UML},
	pages={173--187},
	year={2004},
	organization={Springer}
}

@article{iovino2012impact,
	title={On the Impact Significance of Metamodel Evolution in MDE.},
	author={Iovino, Ludovico and Pierantonio, Alfonso and Malavolta, Ivano},
	journal={Journal of Object Technology},
	volume={11},
	number={3},
	pages={3--1},
	year={2012}
}

@inproceedings{schonbock2015model,
	title={Model-Driven Co-evolution for Agile Development},
	author={Sch{\"o}nb{\"o}ck, Johannes and Etzlstorfer, Juergen and Kapsammer, Elisabeth and Kusel, Angelika and Retschitzegger, Werner and Schwinger, Wieland},
	booktitle={System Sciences (HICSS), 48th Hawaii International Conference on},
	pages={5094--5103},
	year={2015},
	organization={IEEE}
}

@inproceedings{reimann2012tool,
	title={Tool supported OCL refactoring catalogue},
	author={Reimann, Jan and Wilke, Claas and Demuth, Birgit and Muck, Michael and A{\ss}mann, Uwe},
	booktitle={Proceedings of the 12th Workshop on OCL and Textual Modelling},
	pages={7--12},
	year={2012},
	organization={ACM}
}

@inproceedings{khelladi2016SAC-OCL,
	title={SAC-OCL: A Tool for A Semi Automatic Co-evolution of OCL Constraints},
	author={Khelladi, Djamel Eddine and Bendraou, Reda and Gervais, Marie-Pierre},
	booktitle={Demonstraions@MODELS},
	pages={40--47},
	year={2016}
}

@article{correa2007refactoring,
	title={Refactoring object constraint language specifications},
	author={Correa, Alexandre and Werner, Cl{\'a}udia},
	journal={Software \& Systems Modeling},
	volume={6},
	number={2},
	pages={113--138},
	year={2007},
	publisher={Springer}
}

@inproceedings{hassam2010adapting,
	title={Adapting ocl constraints after a refactoring of their model using an mde process},
	author={Hassam, Kahina and Sadou, Salah and Fleurquin, R{\'e}gis},
	booktitle={9th edition of the BElgian-NEtherlands software eVOLution seminar (BENEVOL 2010)},
	pages={16--27},
	year={2010}
}

@inproceedings{demuth2011cross,
	title={Cross-layer modeler: a tool for flexible multilevel modeling with consistency checking},
	author={Demuth, Andreas and Lopez-Herrejon, Roberto E and Egyed, Alexander},
	booktitle={The 19th ACM SIGSOFT FSE and the 13th ESEC},
	pages={452--455},
	year={2011}
}

@inproceedings{demuth2012enabling,
	title={Enabling dynamic metamodels through constraint-driven modeling},
	author={Demuth, Andreas},
	booktitle={Proceedings of the 34th International Conference on Software Engineering},
	pages={1622--1624},
	year={2012},
	organization={IEEE Press}
}



@article{mengerink2016complete,
	title={A complete operator library for DSL evolution specification},
	author={Mengerink, JGM and Serebrenik, A and Schiffelers, RRH and van den Brand, MGJ},
	year={2016},
	publisher={ICSME}
}

@article{harman2012search,
	title={Search-based software engineering: Trends, techniques and applications},
	author={Harman, Mark and Mansouri, S Afshin and Zhang, Yuanyuan},
	journal={ACM Computing Surveys},
	volume={45},
	number={1},
	pages={11},
	year={2012},
	publisher={ACM}
}

@inproceedings{hutchinson2011empirical,
	title={Empirical assessment of MDE in industry},
	author={Hutchinson, John and Whittle, Jon and Rouncefield, Mark and Kristoffersen, Steinar},
	booktitle={Proceedings of the 33rd International Conference on Software Engineering},
	pages={471--480},
	year={2011},
	organization={ACM}
}

@inproceedings{tolvanen2009metaedit,
	title={MetaEdit+: defining and using integrated domain-specific modeling languages},
	author={Tolvanen, Juha-Pekka and Kelly, Steven},
	booktitle={The 24th ACM SIGPLAN conference companion on OOPSLA},
	pages={819--820},
	year={2009}
}

@article{paige2016evolving,
	title={Evolving models in model-driven engineering: State-of-the-art and future challenges},
	author={Paige, Richard F and Matragkas, Nicholas and Rose, Louis M},
	journal={Journal of Systems and Software},
	volume={111},
	pages={272--280},
	year={2016},
	publisher={Elsevier}
}

@incollection{herrmannsdorfer2014coupled,
	title={Coupled evolution of software metamodels and models},
	author={Herrmannsd{\"o}rfer, Markus and Wachsmuth, Guido},
	booktitle={Evolving Software Systems},
	pages={33--63},
	year={2014},
	publisher={Springer}
}

@article{rose2014graph,
	title={Graph and model transformation tools for model migration},
	author={Rose, Louis M and Herrmannsdoerfer, Markus and Mazanek, Steffen and Van Gorp, Pieter and Buchwald, Sebastian and Horn, Tassilo and Kalnina, Elina and Koch, Andreas and Lano, Kevin and Sch{\"a}tz, Bernhard and others},
	journal={Software \& Systems Modeling},
	volume={13},
	number={1},
	pages={323--359},
	year={2014},
	publisher={Springer}
}

@inproceedings{usman2008survey,
	title={A survey of consistency checking techniques for UML models},
	author={Usman, Muhammad and Nadeem, Aamer and Kim, Tai-hoon and Cho, Eun-suk},
	booktitle={Advanced Software Engineering and Its Applications, 2008. ASEA 2008},
	pages={57--62},
	year={2008},
	organization={IEEE}
}


@inproceedings{cabot2006constraint,
	title={Constraint Support in MDA tools: a Survey},
	author={Cabot, Jordi and Teniente, Ernest},
	booktitle={European Conference on Model Driven Architecture-Foundations and Applications},
	pages={256--267},
	year={2006},
	organization={Springer}
}

@article{toval2003emerging,
	title={Emerging OCL tools},
	author={Toval, Ambrosio and Requena, V{\'\i}ctor and Fern{\'a}ndez, Jos{\'e} Luis},
	journal={Software \& Systems Modeling},
	volume={2},
	number={4},
	pages={248--261},
	year={2003},
	publisher={Springer}
}

@inproceedings{li2007test,
	title={Test case automate generation from UML sequence diagram and OCL expression},
	author={Li, Bao-Lin and Li, Zhi-shu and Qing, Li and Chen, Yan-Hong},
	booktitle={Computational Intelligence and Security, 2007 International Conference on},
	pages={1048--1052},
	year={2007},
	organization={IEEE}
}

@article{ali2013generating,
	title={Generating test data from OCL constraints with search techniques},
	author={Ali, Shaukat and Iqbal, Muhammad Zohaib and Arcuri, Andrea and Briand, Lionel C},
	journal={IEEE Transactions on Software Engineering},
	volume={39},
	number={10},
	pages={1376--1402},
	year={2013},
	publisher={IEEE}
}

@article{frisch2008essence,
	title={Essence: A constraint language for specifying combinatorial problems},
	author={Frisch, Alan M and Harvey, Warwick and Jefferson, Chris and Mart{\'\i}nez-Hern{\'a}ndez, Bernadette and Miguel, Ian},
	journal={Constraints},
	volume={13},
	number={3},
	pages={268--306},
	year={2008},
	publisher={Springer}
}

@article{mens2006taxonomy,
	title={A taxonomy of model transformation},
	author={Mens, Tom and Van Gorp, Pieter},
	journal={Electronic Notes in Theoretical Computer Science},
	volume={152},
	pages={125--142},
	year={2006},
	publisher={Elsevier}
}

@inproceedings{konemann2010semantic,
	title={Semantic grouping of model changes},
	author={K{\"o}nemann, Patrick},
	booktitle={Proceedings of the 1st International Workshop on Model Comparison in Practice},
	pages={50--55},
	year={2010},
	organization={ACM}
}

@article{kessentini2016search,
	title={Search-based detection of model level changes},
	author={Kessentini, Marouane and Mansoor, Usman and Wimmer, Manuel and Ouni, Ali and Deb, Kalyanmoy},
	journal={Empirical Software Engineering},
	pages={1--46},
	year={2016},
	publisher={Springer}
}

@inproceedings{ben2012search,
	title={Search-based detection of high-level model changes},
	author={ben Fadhel, Ameni and Kessentini, Marouane and Langer, Philip and Wimmer, Manuel},
	booktitle={Software Maintenance (ICSM), 2012 28th IEEE International Conference on},
	pages={212--221},
	year={2012},
	organization={IEEE}
}

@inproceedings{kehrer2012understanding,
	title={Understanding model evolution through semantically lifting model differences with SiLift},
	author={Kehrer, Timo and Kelter, Udo and Ohrndorf, Manuel and Sollbach, Tim},
	booktitle={Software Maintenance (ICSM), 2012 28th IEEE International Conference on},
	pages={638--641},
	year={2012},
	organization={IEEE}
}

@inproceedings{koshima2015rucord,
	title={RuCORD: Rule-based composite operation recovering and detection to support cooperative edition of (Meta) models},
	author={Koshima, Amanuel and Englebert, Vincent},
	booktitle={Model-Driven Engineering and Software Development (MODELSWARD), 2015 3rd International Conference on},
	pages={1--7},
	year={2015},
	organization={IEEE}
}

@inproceedings{mendez2012effective,
	title={Effective detection of model changes},
	author={M{\'e}ndez-Acu{\~n}a, David and Casallas, Rubby},
	booktitle={Computing Congress (CCC), 2012 7th Colombian},
	pages={1--5},
	year={2012},
	organization={IEEE}
}

@inproceedings{herrmannsdoerfer2010towards,
	title={Towards a generic operation recorder for model evolution},
	author={Herrmannsdoerfer, Markus and Koegel, Maximilian},
	booktitle={Proceedings of the 1st International Workshop on Model Comparison in Practice},
	pages={76--81},
	year={2010},
	organization={ACM}
}

@inproceedings{herrmannsdoerfer2009operation,
	title={Operation-based versioning of metamodels with COPE},
	author={Herrmannsdoerfer, Markus},
	booktitle={Comparison and Versioning of Software Models, 2009. CVSM'09. ICSE Workshop on},
	pages={49--54},
	year={2009},
	organization={IEEE}
}

@article{cicchetti2007metamodel,
	title={A metamodel independent approach to difference representation.},
	author={Cicchetti, Antonio and Di Ruscio, Davide and Pierantonio, Alfonso},
	journal={Journal of Object Technology},
	volume={6},
	number={9},
	pages={165--185},
	year={2007}
}

@inproceedings{cicchetti2008meta,
	title={Meta-model differences for supporting model co-evolution},
	author={Cicchetti, Antonio and Di Ruscio, Davide and Eramo, Romina and Pierantonio, Alfonso},
	booktitle={Proceedings of the 2nd Workshop on Model-Driven Software Evolution-MODSE},
	pages={1--10},
	year={2008}
}


@inproceedings{xing2010model,
	title={Model comparison with GenericDiff},
	author={Xing, Zhenchang},
	booktitle={Proceedings of the IEEE/ACM international conference on Automated software engineering},
	pages={135--138},
	year={2010},
	organization={ACM}
}

@article{zhang2017detection,
	title={Detection of Composite Operation in Model Management},
	author={Zhang, Renwei and Qin, Zheng and Song, Houbing and Li, Shengnan and Yang, Xiao},
	journal={IEEE Access},
	volume={5},
	pages={771--780},
	year={2017},
	publisher={IEEE}
}

@inproceedings{kehrer2013consistency,
	title={Consistency-preserving edit scripts in model versioning},
	author={Kehrer, Timo and Kelter, Udo and Taentzer, Gabriele},
	booktitle={Automated Software Engineering (ASE), 2013 IEEE/ACM 28th International Conference on},
	pages={191--201},
	year={2013},
	organization={IEEE}
}

@inproceedings{boger2002refactoring,
	title={Refactoring browser for UML},
	author={Boger, Marko and Sturm, Thorsten and Fragemann, Per},
	booktitle={Net. ObjectDays: International Conference on Object-Oriented and Internet-Based Technologies, Concepts, and Applications for a Networked World},
	pages={366--377},
	year={2002},
	organization={Springer}
}

@article{altmanninger2009survey,
	title={A survey on model versioning approaches},
	author={Altmanninger, Kerstin and Seidl, Martina and Wimmer, Manuel},
	journal={International Journal of Web Information Systems},
	volume={5},
	number={3},
	pages={271--304},
	year={2009},
	publisher={Emerald Group Publishing Limited}
}

@book{kelly2008domain,
	title={Domain-specific modeling: enabling full code generation},
	author={Kelly, Steven and Tolvanen, Juha-Pekka},
	year={2008},
	publisher={John Wiley \& Sons}
}

@article{whittle2014state,
	title={The state of practice in model-driven engineering},
	author={Whittle, Jon and Hutchinson, John and Rouncefield, Mark},
	journal={IEEE software},
	volume={31},
	number={3},
	pages={79--85},
	year={2014},
	publisher={IEEE}
}

@article{utting2012taxonomy,
	title={A taxonomy of model-based testing approaches},
	author={Utting, Mark and Pretschner, Alexander and Legeard, Bruno},
	journal={Software Testing, Verification and Reliability},
	volume={22},
	number={5},
	pages={297--312},
	year={2012},
	publisher={Wiley Online Library}
}

@inproceedings{pretschner2005model,
	title={Model-based testing},
	author={Pretschner, Alexander},
	booktitle={Software Engineering, 2005. ICSE 2005. Proceedings. 27th International Conference on},
	pages={722--723},
	year={2005},
	organization={IEEE}
}

@inproceedings{kusel2015consistent,
	title={Consistent co-evolution of models and transformations},
	author={Kusel, Angelika and Etzlstorfer, Jurgen and Kapsammer, Elisabeth and Retschitzegger, Werner and Schwinger, Wieland and Schonbock, Johannes},
	booktitle={ACM/IEEE 18th MODELS},
	pages={116--125},
	year={2015}
}

@inproceedings{taentzer2013customizable,
	title={Customizable model migration schemes for meta-model evolutions with multiplicity changes},
	author={Taentzer, Gabriele and Mantz, Florian and Arendt, Thorsten and Lamo, Yngve},
	booktitle={International Conference on Model Driven Engineering Languages and Systems},
	pages={254--270},
	year={2013},
	organization={Springer}
}

@inproceedings{altmanninger2008amor,
	title={AMOR--towards adaptable model versioning},
	author={Altmanninger, Kerstin and Kappel, Gerti and Kusel, Angelika and Retschitzegger, Werner and Seidl, Martina and Schwinger, Wieland and Wimmer, Manuel},
	booktitle={1st International Workshop on Model Co-Evolution and Consistency Management, in conjunction with MODELS},
	volume={8},
	pages={4--50},
	year={2008}
}

@inproceedings{kogel2008towards,
	title={Towards software configuration management for unified models},
	author={K{\"o}gel, Maximilian},
	booktitle={Proceedings of the 2008 international workshop on Comparison and versioning of software models},
	pages={19--24},
	year={2008},
	organization={ACM}
}

@inproceedings{alkhazi2016automated,
	title={Automated refactoring of ATL model transformations: a search-based approach},
	author={Alkhazi, Bader and Ruas, Terry and Kessentini, Marouane and Wimmer, Manuel and Grosky, William I},
	booktitle={The ACM/IEEE 19th MODELS},
	pages={295--304},
	year={2016}
}



@inproceedings{di2013methodological,
	title={A methodological approach for the coupled evolution of metamodels and atl transformations},
	author={Di Ruscio, Davide and Iovino, Ludovico and Pierantonio, Alfonso},
	booktitle={ICMT},
	pages={60--75},
	year={2013},
	organization={Springer}
}

@inproceedings{di2014dealing,
	title={Dealing with the Coupled Evolution of Metamodels and Model-to-text Transformations.},
	author={Di Rocco, Juri and Di Ruscio, Davide and Iovino, Ludovico and Pierantonio, Alfonso},
	booktitle={ME@ MoDELS},
	pages={22--31},
	year={2014}
}

@inproceedings{salman2015students,
	title={Are students representatives of professionals in software engineering experiments?},
	author={Salman, Iflaah and Misirli, Ayse Tosun and Juristo, Natalia},
	booktitle={ICSE-Volume 1},
	pages={666--676},
	year={2015},
	organization={IEEE Press}
}

@inproceedings{runeson2003using,
	title={Using students as experiment subjects--an analysis on graduate and freshmen student data},
	author={Runeson, Per},
	booktitle={Proceedings of the 7th International Conference on Empirical Assessment in Software Engineering},
	pages={95--102},
	year={2003}
}

@article{host2000using,
	title={Using students as subjects—a comparative study of students and professionals in lead-time impact assessment},
	author={H{\"o}st, Martin and Regnell, Bj{\"o}rn and Wohlin, Claes},
	journal={Empirical Software Engineering},
	volume={5},
	number={3},
	pages={201--214},
	year={2000},
	publisher={Springer}
}

@inproceedings{berander2004using,
	title={Using students as subjects in requirements prioritization},
	author={Berander, Patrik},
	booktitle={Empirical Software Engineering, 2004. ISESE'04. Proceedings. 2004 International Symposium on},
	pages={167--176},
	year={2004},
	organization={IEEE}
}

@inproceedings{svahnberg2008using,
	title={Using students as subjects-an empirical evaluation},
	author={Svahnberg, Mikael and Aurum, Ayb{\"u}ke and Wohlin, Claes},
	booktitle={2nd ESEM},
	pages={288--290},
	year={2008},
	organization={ACM}
}

@article{mendez2010towards,
	title={Towards transformation migration after metamodel evolution},
	author={Mendez, David and Etien, Anne and Muller, Alexis and Casallas, Rubby},
	journal={ME Wokshop@MODELS},
	year={2010}
}



@article{jakumeit2014survey,
	title={A survey and comparison of transformation tools based on the transformation tool contest},
	author={Jakumeit, Edgar and Buchwald, Sebastian and Wagelaar, Dennis and Dan, Li and Heged{\"u}s, {\'A}bel and Herrmannsd{\"o}rfer, Markus and Horn, Tassilo and Kalnina, Elina and Krause, Christian and Lano, Kevin and others},
	journal={Science of computer programming},
	volume={85},
	pages={41--99},
	year={2014},
	publisher={Elsevier}
}


@article{taentzer2005model,
	title={Model transformation by graph transformation: A comparative study},
	author={Taentzer, Gabriele and Ehrig, Karsten and Guerra, Esther and Lara, Juan de and Lengyel, Laszlo and Levendovszky, Tihamer and Prange, Ulrike and Varr{\'o}, D{\'a}niel and Varr{\'o}-Gyapay, Szilvia},
	year={2005}
}

@inproceedings{gronmo2009comparison,
	title={Comparison of three model transformation languages},
	author={Gr{\o}nmo, Roy and M{\o}ller-Pedersen, Birger and Olsen, G{\o}ran K},
	booktitle={ECMDA-FA},
	pages={2--17},
	year={2009},
	organization={Springer}
}

@article{perez2010case,
	title={A case study to evaluate the suitability of graph transformation tools for program refactoring},
	author={P{\'e}rez, Javier and Crespo, Yania and Hoffmann, Berthold and Mens, Tom},
	journal={International Journal on Software Tools for Technology Transfer (STTT)},
	volume={12},
	number={3},
	pages={183--199},
	year={2010},
	publisher={Springer}
}

@inproceedings{rose2010comparing,
	title={Comparing model-metamodel and transformation-metamodel coevolution},
	author={Rose, Louis and Etien, Anne and Mendez, David and Kolovos, Dimitrios and Paige, Richard and Polack, Fiona},
	booktitle={International workshop on models and evolutions},
	year={2010}
}

@article{sendall2003model,
	title={Model transformation: The heart and soul of model-driven software development},
	author={Sendall, Shane and Kozaczynski, Wojtek},
	journal={IEEE software},
	volume={20},
	number={5},
	pages={42--45},
	year={2003},
	publisher={IEEE}
}

@inproceedings{czarnecki2003classification,
	title={Classification of model transformation approaches},
	author={Czarnecki, Krzysztof and Helsen, Simon},
	booktitle={Proceedings of the 2nd OOPSLA Workshop on Generative Techniques in the Context of the Model Driven Architecture},
	volume={45},
	number={3},
	pages={1--17},
	year={2003},
	organization={USA}
}



@article{hemel2010code,
	title={Code generation by model transformation: a case study in transformation modularity},
	author={Hemel, Zef and Kats, Lennart CL and Groenewegen, Danny M and Visser, Eelco},
	journal={Software and Systems Modeling},
	volume={9},
	number={3},
	pages={375--402},
	year={2010},
	publisher={Springer}
}

@inproceedings{burger2010change,
	title={A Change Metamodel for the Evolution of MOF-Based Metamodels.},
	author={Burger, Erik and Gruschko, Boris},
	booktitle={Modellierung},
	volume={2010},
	pages={285--300},
	year={2010}
}

@article{mens2007analysing,
	title={Analysing refactoring dependencies using graph transformation},
	author={Mens, Tom and Taentzer, Gabriele and Runge, Olga},
	journal={Software and Systems Modeling},
	volume={6},
	number={3},
	pages={269},
	year={2007},
	publisher={Springer}
}

@article{zhang2005generic,
	title={Generic and domain-specific model refactoring using a model transformation engine},
	author={Zhang, Jing and Lin, Yuehua and Gray, Jeff},
	journal={Model-driven Software Development},
	volume={23},
	year={2005},
	publisher={Springer}
}

@article{hebig2016approaches,
	title={Approaches to co-evolution of metamodels and models: A survey},
	author={Hebig, Regina and Khelladi, Djamel Eddine and Bendraou, Reda},
	journal={IEEE Transactions on Software Engineering},
	volume={43},
	number={5},
	pages={396--414},
	year={2016},
	publisher={IEEE}
}

@inproceedings{hebig2015surveying,
	title={Surveying the corpus of model resolution strategies for metamodel evolution},
	author={Hebig, Regina and Khelladi, Djamel Eddine and Bendraou, Reda},
	booktitle={2015 Asia-Pacific Software Engineering Conference (APSEC)},
	pages={135--142},
	year={2015},
	organization={IEEE}
}

@inproceedings{khelladi2017exploratory,
	title={An Exploratory Experiment on Metamodel-Transformation Co-Evolution},
	author={Khelladi, Djamel Eddine and Rodriguez, Horacio Hoyos and Kretschmer, Roland and Egyed, Alexander},
	booktitle={Asia-Pacific Software Engineering Conference (APSEC), 2017 24th},
	pages={576--581},
	year={2017},
	organization={IEEE}
}

@inproceedings{combemale2007towards,
	title={Towards a Formal Verification of Process Model's Properties-SimplePDL and TOCL Case Study},
	author={Combemale, Beno{\^\i}t and Garoche, Pierre-Lo{\"\i}c and Cr{\'e}gut, Xavier and Thirioux, Xavier and Vernadat, Fran{\c{c}}ois},
	booktitle={9th International Conference on Enterprise Information Systems},
	pages={80--89},
	year={2007}
}

@inproceedings{cregut2010generative,
	title={Generative technologies for model animation in the TopCased platform},
	author={Cr{\'e}gut, Xavier and Combemale, Benoit and Pantel, Marc and Faudoux, Rapha{\"e}l and Pavei, Jonatas},
	booktitle={European Conference on Modelling Foundations and Applications},
	pages={90--103},
	year={2010},
	organization={Springer}
}

@inproceedings{hassan2004predicting,
	title={Predicting change propagation in software systems},
	author={Hassan, Ahmed E and Holt, Richard C},
	booktitle={Software maintenance, 2004. proceedings. 20th ieee international conference on},
	pages={284--293},
	year={2004},
	organization={IEEE}
}

@article{khelladi2017semi,
	title={A semi-automatic maintenance and co-evolution of OCL constraints with (meta) model evolution},
	author={Khelladi, Djamel Eddine and Bendraou, Reda and Hebig, Regina and Gervais, Marie-Pierre},
	journal={Journal of Systems and Software},
	volume={134},
	pages={242--260},
	year={2017},
	publisher={Elsevier}
}

@inproceedings{vcubranic2003hipikat,
	title={Hipikat: Recommending pertinent software development artifacts},
	author={{\v{C}}ubrani{\'c}, Davor and Murphy, Gail C},
	booktitle={Proceedings of the 25th international Conference on Software Engineering},
	pages={408--418},
	year={2003},
	organization={IEEE Computer Society}
}

@inproceedings{robillard2002concern,
	title={Concern graphs: finding and describing concerns using structural program dependencies},
	author={Robillard, MR and Murphy, Gail C},
	booktitle={Software Engineering, 2002. ICSE 2002. Proceedings of the 24rd International Conference on},
	pages={406--416},
	year={2002},
	organization={IEEE}
}

@article{vieira2016towards,
	title={Towards Measuring the Change Impact in ATL Model Transformations},
	author={Vieira, Andreza and Ramalho, Franklin},
	journal={International Journal of Software Engineering and Knowledge Engineering},
	volume={26},
	number={02},
	pages={153--181},
	year={2016},
	publisher={World Scientific}
}

@inproceedings{vieira2014metrics,
	title={Metrics to measure the change impact in ATL model transformations},
	author={Vieira, Andreza and Ramalho, Franklin},
	booktitle={International Conference on Product-Focused Software Process Improvement},
	pages={254--268},
	year={2014},
	organization={Springer}
}


@article{cuadrado2018quick,
	title={Quick fixing ATL transformations with speculative analysis},
	author={Cuadrado, Jes{\'u}s S{\'a}nchez and Guerra, Esther and de Lara, Juan},
	journal={Software \& Systems Modeling},
	pages={1--35},
	year={2018},
	publisher={Springer}
}

@inproceedings{cuadrado2015quick,
	title={Quick fixing ATL model transformations},
	author={Cuadrado, Jes{\'u}s S{\'a}nchez and Guerra, Esther and de Lara, Juan},
	booktitle={2015 ACM/IEEE 18th International Conference on Model Driven Engineering Languages and Systems (MODELS)},
	pages={146--155},
	year={2015},
	organization={IEEE}
}

@inproceedings{di2017feature,
	title={A feature-based approach for variability exploration and resolution in model transformation migration},
	author={Di Ruscio, Davide and Etzlstorfer, Juergen and Iovino, Ludovico and Pierantonio, Alfonso and Schwinger, Wieland},
	booktitle={European Conference on Modelling Foundations and Applications},
	pages={71--89},
	year={2017},
	organization={Springer}
}

@inproceedings{khelladi2018change,
	title={Change Propagation-based and Composition-based Co-evolution of Transformations with Evolving Metamodels},
	author={Khelladi, Djamel Eddine and Kretschmer, Roland and Egyed, Alexander},
	booktitle={Proceedings of the 21th ACM/IEEE International Conference on Model Driven Engineering Languages and Systems},
	pages={404--414},
	year={2018},
	organization={ACM}
}

@article{van2000domain,
	title={Domain-specific languages: An annotated bibliography},
	author={Van Deursen, Arie and Klint, Paul and Visser, Joost},
	journal={ACM Sigplan Notices},
	volume={35},
	number={6},
	pages={26--36},
	year={2000},
	publisher={ACM}
}

@book{gronback2009eclipse,
	title={Eclipse modeling project: a domain-specific language (DSL) toolkit},
	author={Gronback, Richard C},
	year={2009},
	publisher={Pearson Education}
}


@article{geiger2007emf,
	title={EMF code generation with Fujaba},
	author={Geiger, Leif and Buchmann, Thomas and Dotor, Alexander},
	journal={Fujaba days},
	pages={25--29},
	year={2007}
}

@article{andersen2010generic,
	title={Generic patch inference},
	author={Andersen, Jesper and Lawall, Julia L},
	journal={Automated software engineering},
	volume={17},
	number={2},
	pages={119--148},
	year={2010},
	publisher={Springer}
}

@article{nguyen2010graph,
	title={A graph-based approach to API usage adaptation},
	author={Nguyen, Hoan Anh and Nguyen, Tung Thanh and Wilson Jr, Gary and Nguyen, Anh Tuan and Kim, Miryung and Nguyen, Tien N},
	journal={ACM Sigplan Notices},
	volume={45},
	number={10},
	pages={302--321},
	year={2010},
	publisher={ACM}
}

@inproceedings{henkel2005catchup,
	title={CatchUp! Capturing and replaying refactorings to support API evolution},
	author={Henkel, Johannes and Diwan, Amer},
	booktitle={Proceedings. 27th International Conference on Software Engineering, 2005. ICSE 2005.},
	pages={274--283},
	year={2005},
	organization={IEEE}
}

@article{dagenais2011recommending,
	title={Recommending adaptive changes for framework evolution},
	author={Dagenais, Barth{\'e}l{\'e}my and Robillard, Martin P},
	journal={ACM Transactions on Software Engineering and Methodology (TOSEM)},
	volume={20},
	number={4},
	pages={19},
	year={2011},
	publisher={ACM}
}

@inproceedings{kessentini2018integrating,
	title={Integrating the Designer in-the-loop for Metamodel/Model Co-Evolution via Interactive Computational Search},
	author={Kessentini, Wael and Wimmer, Manuel and Sahraoui, Houari},
	booktitle={Proceedings of the 21th ACM/IEEE International Conference on Model Driven Engineering Languages and Systems},
	pages={101--111},
	year={2018},
	organization={ACM}
}

@article{kessentini2019automated,
	title={Automated metamodel/model co-evolution: A search-based approach},
	author={Kessentini, Wael and Sahraoui, Houari and Wimmer, Manuel},
	journal={Information and Software Technology},
	volume={106},
	pages={49--67},
	year={2019},
	publisher={Elsevier}
}

@inproceedings{batot2017heuristic,
	title={Heuristic-Based Recommendation for Metamodel—OCL Coevolution},
	author={Batot, Edouard and Kessentini, Wael and Sahraoui, Houari and Famelis, Michalis},
	booktitle={2017 ACM/IEEE 20th International Conference on Model Driven Engineering Languages and Systems (MODELS)},
	pages={210--220},
	year={2017},
	organization={IEEE}
}

@inproceedings{kessentini2018automated,
	title={Automated Co-evolution of Metamodels and Transformation Rules: A Search-Based Approach},
	author={Kessentini, Wael and Sahraoui, Houari and Wimmer, Manuel},
	booktitle={International Symposium on Search Based Software Engineering},
	pages={229--245},
	year={2018},
	organization={Springer}
}

@book{fowler2010domain,
	title={Domain-specific languages},
	author={Fowler, Martin},
	year={2010},
	publisher={Pearson Education}
}

@article{monperrus2018automatic,
	title={Automatic software repair: a bibliography},
	author={Monperrus, Martin},
	journal={ACM Computing Surveys (CSUR)},
	volume={51},
	number={1},
	pages={17},
	year={2018},
	publisher={ACM}
}

@inproceedings{yu2012maintaining,
	title={Maintaining invariant traceability through bidirectional transformations},
	author={Yu, Yijun and Lin, Yu and Hu, Zhenjiang and Hidaka, Soichiro and Kato, Hiroyuki and Montrieux, Lionel},
	booktitle={2012 34th International Conference on Software Engineering (ICSE)},
	pages={540--550},
	year={2012},
	organization={IEEE}
}

@inproceedings{khelladi2020onthepower,
	title={On the Power of Abstraction: a Model-Driven Co-evolution Approach of Software Code},
	author={Khelladi, Djamel Eddine and Combemale, Benoit and Acher, Mathieu and Barais, Olivier},
	booktitle={2020 IEEE/ACM 42st International Conference on Software Engineering: New Ideas and Emerging Results (ICSE-NIER)},
	year={2020}
}

@inproceedings{kessentini2020interactive,
	title={Interactive metamodel/model co-evolution using unsupervised learning and multi-objective search},
	author={Kessentini, Wael and Alizadeh, Vahid},
	booktitle={Proceedings of the 23rd ACM/IEEE International Conference on Model Driven Engineering Languages and Systems},
	pages={68--78},
	year={2020}
}

@inproceedings{cherfa2021identifying,
	title={Identifying Metamodel Inaccurate Structures During Metamodel/Constraint Co-Evolution},
	author={Cherfa, Elyes and Mesli-Kesraoui, Soraya and Tibermacine, Chouki and Sadou, Salah and Fleurquin, R{\'e}gis},
	booktitle={2021 ACM/IEEE 24th International Conference on Model Driven Engineering Languages and Systems (MODELS)},
	pages={24--34},
	year={2021},
	organization={IEEE}
}

@inproceedings{jongeling2020towards,
	title={Towards consistency checking between a system model and its implementation},
	author={Jongeling, Robbert and Fredriksson, Johan and Ciccozzi, Federico and Cicchetti, Antonio and Carlson, Jan},
	booktitle={International Conference on Systems Modelling and Management},
	pages={30--39},
	year={2020},
	organization={Springer}
}


@inproceedings{jongeling2022Structural,
	title={Structural consistency between a system model and its implementation: a design science study in industry},
	author={Jongeling, Robbert and Fredriksson, Johan and Ciccozzi, Federico and Carlson, Jan and Cicchetti, Antonio},
	booktitle={The European Conference on Modelling Foundations and Applications (ECMFA)},
	year={2022}
}

@inproceedings{zaheri2021towards,
	title={Towards Checking Consistency-Breaking Updates between Models and Generated Artifacts},
	author={Zaheri, MohammadAmin and Famelis, Michalis and Syriani, Eugene},
	booktitle={2021 ACM/IEEE International Conference on Model Driven Engineering Languages and Systems Companion (MODELS-C)},
	pages={400--409},
	year={2021},
	organization={IEEE}
}


@inproceedings{pham2017bidirectional,
	title={Bidirectional mapping between architecture model and code for synchronization},
	author={Pham, Van Cam and Radermacher, Ansgar and Gerard, Sebastien and Li, Shuai},
	booktitle={2017 IEEE International Conference on Software Architecture (ICSA)},
	pages={239--242},
	year={2017},
	organization={IEEE}
}

@article{goues2019automated,
	title={Automated program repair},
	author={Goues, Claire Le and Pradel, Michael and Roychoudhury, Abhik},
	journal={Communications of the ACM},
	volume={62},
	number={12},
	pages={56--65},
	year={2019},
	publisher={ACM New York, NY, USA}
}

@inproceedings{liu2020efficiency,
	title={On the efficiency of test suite based program repair: A systematic assessment of 16 automated repair systems for java programs},
	author={Liu, Kui and Wang, Shangwen and Koyuncu, Anil and Kim, Kisub and Bissyand{\'e}, Tegawend{\'e} F and Kim, Dongsun and Wu, Peng and Klein, Jacques and Mao, Xiaoguang and Traon, Yves Le},
	booktitle={Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering},
	pages={615--627},
	year={2020}
}

@article{gazzola2017automatic,
	title={Automatic software repair: A survey},
	author={Gazzola, Luca and Micucci, Daniela and Mariani, Leonardo},
	journal={IEEE Transactions on Software Engineering},
	volume={45},
	number={1},
	pages={34--67},
	year={2017},
	publisher={IEEE}
}

@inproceedings{bohme2013regression,
	title={Regression tests to expose change interaction errors},
	author={B{\"o}hme, Marcel and Oliveira, Bruno C d S and Roychoudhury, Abhik},
	booktitle={Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering},
	pages={334--344},
	year={2013}
}

@inproceedings{riedl2014towards,
	title={Towards model-and-code consistency checking},
	author={Riedl-Ehrenleitner, Markus and Demuth, Andreas and Egyed, Alexander},
	booktitle={2014 IEEE 38th Annual Computer Software and Applications Conference},
	pages={85--90},
	year={2014},
	organization={IEEE}
}

@article{kanakis2019empirical,
	title={An Empirical Study on the Impact of Inconsistency Feedback during Model and Code Co-changing.},
	author={Kanakis, Georgios and Khelladi, Djamel Eddine and Fischer, Stefan and Tr{\"o}ls, Michael and Egyed, Alexander},
	journal={The Journal of Object Technology},
	volume={18},
	number={2},
	pages={10--1},
	year={2019}
}

@inproceedings{khelladi2019detecting,
	title={Detecting and exploring side effects when repairing model inconsistencies},
	author={Khelladi, Djamel Eddine and Kretschmer, Roland and Egyed, Alexander},
	booktitle={Proceedings of the 12th ACM SIGPLAN International Conference on Software Language Engineering},
	pages={113--126},
	year={2019}
}

@inproceedings{fraser2011evosuite,
	title={Evosuite: automatic test suite generation for object-oriented software},
	author={Fraser, Gordon and Arcuri, Andrea},
	booktitle={Proceedings of the 19th ACM SIGSOFT symposium and the 13th European conference on Foundations of software engineering},
	pages={416--419},
	year={2011}
}

@inproceedings{10.1145/3387905.3388608,
	author = {Fazzini, Mattia and Xin, Qi and Orso, Alessandro},
	title = {APIMigrator: an API-usage migration tool for Android apps},
	year = {2020},
	isbn = {9781450379595},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3387905.3388608},
	doi = {10.1145/3387905.3388608},
	abstract = {To provide their functionality, mobile apps interact extensively with the application programming interface (API) of the underlying operating system. Given that this API evolves frequently, app developers are periodically required to migrate API usages in their apps to ensure that the apps behave as expected when running on the new API. To help developers with this tedious, error-prone, and time-consuming task, we defined a technique for automated API migration and implemented it in a tool called APIMigrator that supports Android apps. APIMigrator (1) automatically migrates API usages within an app by leveraging how developers of other apps migrated corresponding API usages and (2) validates the migrations through differential testing. We evaluated APIMigrator on a benchmark of 15 real-world apps and obtained promising results. Overall, our tool was able to migrate 85\% of the API usages considered and validate 68\% of these migrations. We provide a demo video of the tool at https://youtu.be/v0VfpKi_IDc.},
	booktitle = {Proceedings of the IEEE/ACM 7th International Conference on Mobile Software Engineering and Systems},
	pages = {77–80},
	numpages = {4},
	keywords = {API analysis, API-usage migration, mobile apps},
	location = {Seoul, Republic of Korea},
	series = {MOBILESoft '20}
}
@inproceedings{10.1145/3395363.3397374,
	author = {Godefroid, Patrice and Lehmann, Daniel and Polishchuk, Marina},
	title = {Differential Regression Testing for REST APIs},
	year = {2020},
	isbn = {9781450380089},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3395363.3397374},
	doi = {10.1145/3395363.3397374},
	abstract = {Cloud services are programmatically accessed through REST APIs. Since REST APIs are constantly evolving, an important problem is how to prevent breaking changes of APIs, while supporting several different versions. To find such breaking changes in an automated way, we introduce differential regression testing for REST APIs. Our approach is based on two observations. First, breaking changes in REST APIs involve two software components, namely the client and the service. As such, there are also two types of regressions: regressions in the API specification, i.e., in the contract between the client and the service, and regressions in the service itself, i.e., previously working requests are "broken" in later versions of the service. Finding both kinds of regressions involves testing along two dimensions: when the service changes and when the specification changes. Second, to detect such bugs automatically, we employ differential testing. That is, we compare the behavior of different versions on the same inputs against each other, and find regressions in the observed differences. For generating inputs (sequences of HTTP requests) to services, we use RESTler, a stateful fuzzer for REST APIs. Comparing the outputs (HTTP responses) of a cloud service involves several challenges, like abstracting over minor differences, handling out-of-order requests, and non-determinism. Differential regression testing across 17 different versions of the widely-used Azure networking APIs deployed between 2016 and 2019 detected 14 regressions in total, 5 of those in the official API specifications and 9 regressions in the services themselves.},
	booktitle = {Proceedings of the 29th ACM SIGSOFT International Symposium on Software Testing and Analysis},
	pages = {312–323},
	numpages = {12},
	keywords = {REST APIs, client/service version matrix, differential regression testing, service regression, specification regression},
	location = {Virtual Event, USA},
	series = {ISSTA 2020}
}

@ARTICLE{9079197,
	author={Lamothe, Maxime and Shang, Weiyi and Chen, Tse-Hsun Peter},
	journal={IEEE Transactions on Software Engineering}, 
	title={A3: Assisting Android API Migrations Using Code Examples}, 
	year={2022},
	volume={48},
	number={2},
	pages={417-431},
	doi={10.1109/TSE.2020.2988396}
}



@inproceedings{10.5555/2486788.2486855,
	author = {Meng, Na and Kim, Miryung and McKinley, Kathryn S.},
	title = {LASE: Locating and Applying Systematic Edits by Learning from Examples},
	year = {2013},
	isbn = {9781467330763},
	publisher = {IEEE Press},
	abstract = {Adding features and fixing bugs often require sys- tematic edits that make similar, but not identical, changes to many code locations. Finding all the relevant locations and making the correct edits is a tedious and error-prone process for developers. This paper addresses both problems using edit scripts learned from multiple examples. We design and implement a tool called LASE that (1) creates a context-aware edit script from two or more examples, and uses the script to (2) automatically identify edit locations and to (3) transform the code. We evaluate LASE on an oracle test suite of systematic edits from Eclipse JDT and SWT. LASE finds edit locations with 99\% precision and 89\% recall, and transforms them with 91\% accuracy. We also evaluate LASE on 37 example systematic edits from other open source programs and find LASE is accurate and effective. Furthermore, we confirmed with developers that LASE found edit locations which they missed. Our novel algorithm that learns from multiple examples is critical to achieving high precision and recall; edit scripts created from only one example produce too many false positives, false negatives, or both. Our results indicate that LASE should help developers in automating systematic editing. Whereas most prior work either suggests edit locations or performs simple edits, LASE is the first to do both for nontrivial program edits.},
	booktitle = {Proceedings of the 2013 International Conference on Software Engineering},
	pages = {502–511},
	numpages = {10},
	location = {San Francisco, CA, USA},
	series = {ICSE '13}
}
@INPROCEEDINGS{6062100,
	author={Wu, Wei and Guéhéneuc, Yann-Gaël and Antoniol, Giuliano and Kim, Miryung},
	booktitle={2010 ACM/IEEE 32nd International Conference on Software Engineering}, 
	title={AURA: a hybrid approach to identify framework evolution}, 
	year={2010},
	volume={1},
	number={},
	pages={325-334},
	doi={10.1145/1806799.1806848}}


@INPROCEEDINGS{5070565,
	author={Dagenais, Barthelemy and Robillard, Martin P.},
	booktitle={2009 IEEE 31st International Conference on Software Engineering}, 
	title={SemDiff: Analysis and recommendation support for API evolution}, 
	year={2009},
	volume={},
	number={},
	pages={599-602},
	doi={10.1109/ICSE.2009.5070565}}



@inproceedings{10.1145/1869459.1869486,
	author = {Nguyen, Hoan Anh and Nguyen, Tung Thanh and Wilson, Gary and Nguyen, Anh Tuan and Kim, Miryung and Nguyen, Tien N.},
	title = {A Graph-Based Approach to API Usage Adaptation},
	year = {2010},
	isbn = {9781450302036},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/1869459.1869486},
	doi = {10.1145/1869459.1869486},
	abstract = {Reusing existing library components is essential for reducing the cost of software development and maintenance. When library components evolve to accommodate new feature requests, to fix bugs, or to meet new standards, the clients of software libraries often need to make corresponding changes to correctly use the updated libraries. Existing API usage adaptation techniques support simple adaptation such as replacing the target of calls to a deprecated API, however, cannot handle complex adaptations such as creating a new object to be passed to a different API method, or adding an exception handling logic that surrounds the updated API method calls.This paper presents LIBSYNC that guides developers in adapting API usage code by learning complex API usage adaptation patterns from other clients that already migrated to a new library version (and also from the API usages within the library's test code). LIBSYNC uses several graph-based techniques (1) to identify changes to API declarations by comparing two library versions, (2) to extract associated API usage skeletons before and after library migration, and (3) to compare the extracted API usage skeletons to recover API usage adaptation patterns. Using the learned adaptation patterns, LIBSYNC recommends the locations and edit operations for adapting API usages. The evaluation of LIBSYNC on real-world software systems shows that it is highly correct and useful with a precision of 100% and a recall of 91%.},
	booktitle = {Proceedings of the ACM International Conference on Object Oriented Programming Systems Languages and Applications},
	pages = {302–321},
	numpages = {20},
	keywords = {software evolution, API evolution, API usage model, program differencing, API usage adaptation},
	location = {Reno/Tahoe, Nevada, USA},
	series = {OOPSLA '10}
}

@article{1145/1932682.1869486,
	author = {Nguyen, Hoan Anh and Nguyen, Tung Thanh and Wilson, Gary and Nguyen, Anh Tuan and Kim, Miryung and Nguyen, Tien N.},
	title = {A Graph-Based Approach to API Usage Adaptation},
	year = {2010},
	issue_date = {October 2010},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {45},
	number = {10},
	issn = {0362-1340},
	url = {https://doi.org/10.1145/1932682.1869486},
	doi = {10.1145/1932682.1869486},
	abstract = {Reusing existing library components is essential for reducing the cost of software development and maintenance. When library components evolve to accommodate new feature requests, to fix bugs, or to meet new standards, the clients of software libraries often need to make corresponding changes to correctly use the updated libraries. Existing API usage adaptation techniques support simple adaptation such as replacing the target of calls to a deprecated API, however, cannot handle complex adaptations such as creating a new object to be passed to a different API method, or adding an exception handling logic that surrounds the updated API method calls.This paper presents LIBSYNC that guides developers in adapting API usage code by learning complex API usage adaptation patterns from other clients that already migrated to a new library version (and also from the API usages within the library's test code). LIBSYNC uses several graph-based techniques (1) to identify changes to API declarations by comparing two library versions, (2) to extract associated API usage skeletons before and after library migration, and (3) to compare the extracted API usage skeletons to recover API usage adaptation patterns. Using the learned adaptation patterns, LIBSYNC recommends the locations and edit operations for adapting API usages. The evaluation of LIBSYNC on real-world software systems shows that it is highly correct and useful with a precision of 100% and a recall of 91%.},
	journal = {SIGPLAN Not.},
	month = {oct},
	pages = {302–321},
	numpages = {20},
	keywords = {software evolution, API evolution, API usage adaptation, API usage model, program differencing}
}

@inproceedings{10.1145/3194793.3194798,
	author = {Gerasimou, Simos and Kechagia, Maria and Kolovos, Dimitris and Paige, Richard and Gousios, Georgios},
	title = {On Software Modernisation Due to Library Obsolescence},
	year = {2018},
	isbn = {9781450357548},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3194793.3194798},
	doi = {10.1145/3194793.3194798},
	abstract = {Software libraries, typically accessible through Application Programming Interfaces (APIs), enhance modularity and reduce development time. Nevertheless, their use reinforces system dependency on third-party software. When libraries become obsolete or their APIs change, performing the necessary modifications to dependent systems, can be time-consuming, labour intensive and error-prone. In this paper, we propose a methodology that reduces the effort developers must spend to mitigate library obsolescence. We describe the steps comprising the methodology, i.e., source code analysis, visualisation of hot areas, code-based transformation, and verification of the modified system. Also, we present some preliminary results and describe our plan for developing a fully automated software modernisation approach.},
	booktitle = {Proceedings of the 2nd International Workshop on API Usage and Evolution},
	pages = {6–9},
	numpages = {4},
	keywords = {application programming interfaces, library evolution, visualisation, software libraries, software modernisation},
	location = {Gothenburg, Sweden},
	series = {WAPI '18}
}

@inproceedings{10.1145/3510455.3512783,
	author = {Ochoa, Lina and Degueule, Thomas and Falleri, Jean-R\'{e}my},
	title = {BreakBot: Analyzing the Impact of Breaking Changes to Assist Library Evolution},
	year = {2022},
	isbn = {9781450392242},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3510455.3512783},
	doi = {10.1145/3510455.3512783},
	abstract = {"If we make this change to our code, how will it impact our clients?" It is difficult for library maintainers to answer this simple---yet essential!---question when evolving their libraries. Library maintainers are constantly balancing between two opposing positions: make changes at the risk of breaking some of their clients, or avoid changes and maintain compatibility at the cost of immobility and growing technical debt. We argue that the lack of objective usage data and tool support leaves maintainers with their own subjective perception of their community to make these decisions.We introduce BreakBot, a bot that analyses the pull requests of Java libraries on GitHub to identify the breaking changes they introduce and their impact on client projects. Through static analysis of libraries and clients, it extracts and summarizes objective data that enrich the code review process by providing maintainers with the appropriate information to decide whether---and how---changes should be accepted, directly in the pull requests.},
	booktitle = {Proceedings of the ACM/IEEE 44th International Conference on Software Engineering: New Ideas and Emerging Results},
	pages = {26–30},
	numpages = {5},
	location = {Pittsburgh, Pennsylvania},
	series = {ICSE-NIER '22}
}
@INPROCEEDINGS{8813263,
	author={Xu, Shengzhe and Dong, Ziqi and Meng, Na},
	booktitle={2019 IEEE/ACM 27th International Conference on Program Comprehension (ICPC)}, 
	title={Meditor: Inference and Application of API Migration Edits}, 
	year={2019},
	volume={},
	number={},
	pages={335-346},
	doi={10.1109/ICPC.2019.00052}}
@INPROCEEDINGS{9283913,
	author={Khelladi, Djamel Eddine and Combemale, Benoit and Acher, Mathieu and Barais, Olivier and Jézéquel, Jean-Marc},
	booktitle={2020 IEEE/ACM 42nd International Conference on Software Engineering (ICSE)}, 
	title={Co-Evolving Code with Evolving Metamodels}, 
	year={2020},
	volume={},
	number={},
	pages={1496-1508},
	doi={}}


@article{https://doi.org/10.1049/sfw2.12075,
	author = {Chen, Yi-Ting and Huang, Chin-Yu and Yang, Tsung-Han},
	title = {Using multi-pattern clustering methods to improve software maintenance quality},
	journal = {IET Software},
	volume = {17},
	number = {1},
	pages = {1-22},
	keywords = {cluster analysis, maintainability, software architecture recovery, software clustering, software modularisation},
	doi = {https://doi.org/10.1049/sfw2.12075},
	url = {https://ietresearch.onlinelibrary.wiley.com/doi/abs/10.1049/sfw2.12075},
	eprint = {https://ietresearch.onlinelibrary.wiley.com/doi/pdf/10.1049/sfw2.12075},
	abstract = {Abstract In software engineering, a software development process, also known as software development life cycle (SDLC), involves several distinct activities for developing, testing, maintaining, and evolving a software system. Within the stages of SDLC, software maintenance occupies most of the total cost of the software life. However, after extended maintenance activities, software quality always degrades due to increasing size and complexity. To solve this problem, software modularisation using clustering is an intuitive way to modularise and classify code into small pieces. , A multi-pattern clustering (MPC) algorithm for software modularisation is proposed in this study. The proposed MPC algorithm can be divided into five different steps: (1) preprocessing, (2) file labelling, (3) collection of chain dependencies, (4) hierarchical agglomerative clustering, (5) modification of the clustering result. The performance of the proposed MPC algorithm to selected clustering techniques is compared by using three open-source and one closed-source software programs. Experimental results show that the modularisation quality of the proposed MPC algorithm is nearly 1.6 times better than that of the expert decomposition. Additionally, compared to other software clustering algorithms, the proposed MPC algorithm, on average, has a 13\% enhancement in producing results similar to human thinking. Consequently, it can be seen that the proposed MPC algorithm is suitable for human comprehension while producing better module quality compared to other clustering algorithms.},
	year = {2023}
}


@article{https://doi.org/10.1002/stvr.1601,
	author = {Rojas, José Miguel and Fraser, Gordon and Arcuri, Andrea},
	title = {Seeding strategies in search-based unit test generation},
	journal = {Software Testing, Verification and Reliability},
	volume = {26},
	number = {5},
	pages = {366-401},
	keywords = {test case generation, search-based testing, testing classes, search-based software engineering, JUnit, Java},
	doi = {https://doi.org/10.1002/stvr.1601},
	url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/stvr.1601},
	eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/stvr.1601},
	abstract = {Summary Search-based techniques have been applied successfully to the task of generating unit tests for object-oriented software. However, as for any meta-heuristic search, the efficiency heavily depends on many factors; seeding, which refers to the use of previous related knowledge to help solve the testing problem at hand, is one such factor that may strongly influence this efficiency. This paper investigates different seeding strategies for unit test generation, in particular seeding of numerical and string constants derived statically and dynamically, seeding of type information and seeding of previously generated tests. To understand the effects of these seeding strategies, the results of a large empirical analysis carried out on a large collection of open-source projects from the SF110 corpus and the Apache Commons repository are reported. These experiments show with strong statistical confidence that, even for a testing tool already able to achieve high coverage, the use of appropriate seeding strategies can further improve performance. © 2016 The Authors. Software Testing, Verification and Reliability Published by John Wiley \& Sons Ltd.},
	year = {2016}
}
@inproceedings{10.1145/3597503.3639084,
	author = {Zhong, Hao and Meng, Na},
	title = {Compiler-directed Migrating API Callsite of Client Code},
	year = {2024},
	isbn = {9798400702174},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3597503.3639084},
	doi = {10.1145/3597503.3639084},
	abstract = {API developers evolve software libraries to fix bugs, add new features, or refactor code, but the evolution can introduce API-breaking changes (e.g., API renaming). To benefit from such evolution, the programmers of client projects have to repetitively upgrade the callsites of libraries, since API-breaking changes introduce many compilation errors. It is tedious and error-prone to resolve such errors, especially when programmers are often unfamiliar with the API usages of newer versions. To migrate client code, the prior approaches either mine API mappings or learn edit scripts, but both the research lines have inherent limitations. For example, mappings alone cannot handle complex cases, and there is no sufficient source (e.g., migration commits) for learning edit scripts.In this paper, we propose a new research direction. When a library is replaced with a newer version, each type of API-breaking change introduces a type of compilation error. For example, renaming the name of an API method causes undefined-method errors at its callsites. Based on this observation, we propose to resolve errors that are introduced by migration, according to their locations and types that are reported by compilers. In this way, a migration tool can incrementally migrate complex cases, even without any change examples. Towards this direction, we propose the first approach, called LibCatch. It defines 14 migration operators, and in a compiler-directed way, it exploits the combinations of migration operators to generate migration solutions, until its predefined criteria are satisfied. We conducted two evaluations. In the first evaluation, we use LibCatch to handle 123 migration tasks. LibCatch reduced migration-related compilation errors for 92.7\% of tasks, and eliminated such errors for 32.4\% of tasks. We inspect the tasks whose errors are eliminated, and find that 33.9\% of them produce identical edits to manual migration edits. In the second evaluation, we use two tools and LibCatch to migrate 15 real client projects in the wild. LibCatch resolved all compilation errors of 7 projects, and reduced the compilation errors of 6 other projects to no more than two errors. As a comparison, the compared two tools reduced the compilation errors of only 1 project.},
	booktitle = {Proceedings of the IEEE/ACM 46th International Conference on Software Engineering},
	articleno = {226},
	numpages = {12},
	keywords = {code migration, compiler, API library},
	location = {<conf-loc>, <city>Lisbon</city>, <country>Portugal</country>, </conf-loc>},
	series = {ICSE '24}
}
@inproceedings{10.1145/1985793.1985882,
	author = {Hutchinson, John and Rouncefield, Mark and Whittle, Jon},
	title = {Model-driven engineering practices in industry},
	year = {2011},
	isbn = {9781450304450},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/1985793.1985882},
	doi = {10.1145/1985793.1985882},
	abstract = {In this paper, we attempt to address the relative absence of empirical studies of model driven engineering through describing the practices of three commercial organizations as they adopted a model driven engineering approach to their software development. Using in-depth semi-structured interviewing we invited practitioners to reflect on their experiences and selected three to use as exemplars or case studies. In documenting some details of attempts to deploy model driven practices, we identify some 'lessons learned', in particular the importance of complex organizational, managerial and social factors - as opposed to simple technical factors - in the relative success, or failure, of the endeavour. As an example of organizational change management the successful deployment of model driven engineering appears to require: a progressive and iterative approach; transparent organizational commitment and motivation; integration with existing organizational processes and a clear business focus.},
	booktitle = {Proceedings of the 33rd International Conference on Software Engineering},
	pages = {633–642},
	numpages = {10},
	keywords = {software engineering, model driven engineering, empirical evaluation},
	location = {Waikiki, Honolulu, HI, USA},
	series = {ICSE '11}
}@ARTICLE{1231146,
author={Selic, B.},
journal={IEEE Software}, 
title={The pragmatics of model-driven development}, 
year={2003},
volume={20},
number={5},
pages={19-25},
keywords={Programming profession;Object oriented modeling;Computer languages;Bridges;Automobiles;Software systems;Automotive engineering;Systems engineering and theory;Productivity;Object oriented programming},
doi={10.1109/MS.2003.1231146}}

@inproceedings{gavsevic2007metamodeling,
	title={On metamodeling in megamodels},
	author={Ga{\v{s}}evi{\'c}, Dragan and Kaviani, Nima and Hatala, Marek},
	booktitle={Model Driven Engineering Languages and Systems: 10th International Conference, MoDELS 2007, Nashville, USA, September 30-October 5, 2007. Proceedings 10},
	pages={91--105},
	year={2007},
	organization={Springer}
}
@inproceedings{de2012domain,
	title={Domain-specific textual meta-modelling languages for model driven engineering},
	author={de Lara, Juan and Guerra, Esther},
	booktitle={Modelling Foundations and Applications: 8th European Conference, ECMFA 2012, Kgs. Lyngby, Denmark, July 2-5, 2012. Proceedings 8},
	pages={259--274},
	year={2012},
	organization={Springer}
}
@article{10.1007/s10270-005-0079-0,
	author = {B\'{e}zivin, Jean},
	title = {On the unification power of models},
	year = {2005},
	issue_date = {May       2005},
	publisher = {Springer-Verlag},
	address = {Berlin, Heidelberg},
	volume = {4},
	number = {2},
	issn = {1619-1366},
	url = {https://doi.org/10.1007/s10270-005-0079-0},
	doi = {10.1007/s10270-005-0079-0},
	abstract = {In November 2000, the OMG made public the MDA™initiative, a particular variant of a new global trend called MDE (Model Driven Engineering). The basic ideas of MDA are germane to many other approaches such as generative programming, domain specific languages, model-integrated computing, generic model management, software factories, etc. MDA may be defined as the realization of MDE principles around a set of OMG standards like MOF, XMI, OCL, UML, CWM, SPEM, etc. MDE is presently making several promises about the potential benefits that could be reaped from a move from code-centric to model-based practices. When we observe these claims, we may wonder when they may be satisfied: on the short, medium or long term or even never perhaps for some of them. This paper tries to propose a vision of the development of MDE based on some lessons learnt in the past 30 years in the development of object technology. The main message is that a basic principle ("Everything is an object") was most helpful in driving the technology in the direction of simplicity, generality and power of integration. Similarly in MDE, the basic principle that "Everything is a model" has many interesting properties, among others the capacity to generate a realistic research agenda. We postulate here that two core relations (representation and conformance) are associated to this principle, as inheritance and instantiation were associated to the object unification principle in the class-based languages of the 80's. We suggest that this may be most useful in understanding many questions about MDE in general and the MDA approach in particular. We provide some illustrative examples. The personal position taken in this paper would be useful if it could generate a critical debate on the research directions in MDE.},
	journal = {Softw. Syst. Model.},
	month = {may},
	pages = {171–188},
	numpages = {18},
	keywords = {Models, Metamodels, MDE, MDA}
}


@incollection{vermolen_reconstructing_2012,
	title={Reconstructing complex metamodel evolution},
	author={Vermolen, Sander D and Wachsmuth, Guido and Visser, Eelco},
	booktitle={Software Language Engineering},
	pages={201--221},
	year={2012},
	publisher={Springer}
}

@incollection{cicchetti_managing_2009,
	title={Managing dependent changes in coupled evolution},
	author={Cicchetti, Antonio and Di Ruscio, Davide and Pierantonio, Alfonso},
	booktitle={Theory and Practice of Model Transformations},
	pages={35--51},
	year={2009},
	publisher={Springer}
}
@article{langer_posteriori_2013,
	title={A posteriori operation detection in evolving software models},
	author={Langer, Philip and Wimmer, Manuel and Brosch, Petra and Herrmannsd{\"o}rfer, Markus and Seidl, Martina and Wieland, Konrad and Kappel, Gerti},
	journal={Journal of Systems and Software},
	volume={86},
	number={2},
	pages={551--566},
	year={2013},
	publisher={Elsevier}
}
@article{bettini2022executable,
	title={An executable metamodel refactoring catalog},
	author={Bettini, Lorenzo and Di Ruscio, Davide and Iovino, Ludovico and Pierantonio, Alfonso},
	journal={Software and Systems Modeling},
	volume={21},
	number={5},
	pages={1689--1709},
	year={2022},
	publisher={Springer}
}

@inproceedings{10.1145/2568225.2568280,
	author = {Ge, Xi and Murphy-Hill, Emerson},
	title = {Manual refactoring changes with automated refactoring validation},
	year = {2014},
	isbn = {9781450327565},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/2568225.2568280},
	doi = {10.1145/2568225.2568280},
	abstract = {Refactoring, the practice of applying behavior-preserving changes to existing code, can enhance the quality of software systems. Refactoring tools can automatically perform and check the correctness of refactorings. However, even when developers have these tools, they still perform about 90\% of refactorings manually, which is error-prone. To address this problem, we propose a technique called GhostFactor separating transformation and correctness checking: we allow the developer to transform code manually, but check the correctness of her transformation automatically. We implemented our technique as a Visual Studio plugin, then evaluated it with a human study of eight software developers; GhostFactor improved the correctness of manual refactorings by 67\%.},
	booktitle = {Proceedings of the 36th International Conference on Software Engineering},
	pages = {1095–1105},
	numpages = {11},
	keywords = {IDE, Refactoring, Restructuring, Tool},
	location = {Hyderabad, India},
	series = {ICSE 2014}
}
@INPROCEEDINGS{7203050,
	author={Gligoric, Milos and Eloussi, Lamyaa and Marinov, Darko},
	booktitle={2015 IEEE/ACM 37th IEEE International Conference on Software Engineering}, 
	title={Ekstazi: Lightweight Test Selection}, 
	year={2015},
	volume={2},
	number={},
	pages={713-716},
	doi={10.1109/ICSE.2015.230}}


@inproceedings{ducasse2000moose,
	title={Moose: an extensible language-independent environment for reengineering object-oriented systems},
	author={Ducasse, St{\'e}phane and Lanza, Michele and Tichelaar, Sander},
	booktitle={Proceedings of the Second International Symposium on Constructing Software Engineering Tools (CoSET 2000)},
	volume={4},
	year={2000}
}
@article{fu2023chatgpt,
	title={ChatGPT for Vulnerability Detection, Classification, and Repair: How Far Are We?},
	author={Fu, Michael and Tantithamthavorn, Chakkrit and Nguyen, Van and Le, Trung},
	journal={arXiv preprint arXiv:2310.09810},
	year={2023}
}


@article{kabir2023empirical,
	title={An empirical study of ChatGPT-3.5 on question answering and code maintenance},
	author={Kabir, Md Mahir Asef and Hassan, Sk Adnan and Wang, Xiaoyin and Wang, Ying and Yu, Hai and Meng, Na},
	journal={arXiv preprint arXiv:2310.02104},
	year={2023}
}

@article{zhang2023multilingual,
	title={Multilingual code co-evolution using large language models},
	author={Zhang, Jiyang and Nie, Pengyu and Li, Junyi Jessy and Gligoric, Milos},
	journal={arXiv preprint arXiv:2307.14991},
	year={2023}
}

@inproceedings{10344012,
	title={Automated Domain Modeling with Large Language Models: A Comparative Study},
	author={Chen, Kua and Yang, Yujing and Chen, Boqi and L{\'o}pez, Jos{\'e} Antonio Hern{\'a}ndez and Mussbacher, Gunter and Varr{\'o}, D{\'a}niel},
	booktitle={2023 ACM/IEEE 26th International Conference on Model Driven Engineering Languages and Systems (MODELS)},
	pages={162--172},
	year={2023},
	organization={IEEE}
}
@article{camara2023assessment,
	title={On the assessment of generative AI in modeling tasks: an experience report with ChatGPT and UML},
	author={C{\'a}mara, Javier and Troya, Javier and Burgue{\~n}o, Lola and Vallecillo, Antonio},
	journal={Software and Systems Modeling},
	pages={1--13},
	year={2023},
	publisher={Springer}
}
@inproceedings{chaaben2023towards,
	title={Towards using few-shot prompt learning for automating model completion},
	author={Chaaben, Meriem Ben and Burgue{\~n}o, Lola and Sahraoui, Houari},
	booktitle={IEEE/ACM 45th Int. Conf. on Software Engineering: New Ideas and Emerging Results (ICSE-NIER)},
	pages={7--12},
	year={2023},
	organization={IEEE}
}
@InProceedings{10.1007/978-3-540-87875-9_44,
	author="Vermolen, Sander
	and Visser, Eelco",
	editor="Czarnecki, Krzysztof
	and Ober, Ileana
	and Bruel, Jean-Michel
	and Uhl, Axel
	and V{\"o}lter, Markus",
	title="Heterogeneous Coupled Evolution of Software Languages",
	booktitle="Model Driven Engineering Languages and Systems",
	year="2008",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="630--644",
	abstract="As most software artifacts, meta-models can evolve. Their evolution requires conforming models to co-evolve along with them. Coupled evolution supports this. Its applicability is not limited to the modeling domain. Other domains are for example evolving grammars or database schemas. Existing approaches to coupled evolution focus on a single, homogeneous domain. They solve the co-evolution problems locally and repeatedly. In this paper we present a systematic, heterogeneous approach to coupled evolution. It provides an automatically derived domain specific transformation language; a means of executing transformations at the top level; a derivation of the coupled bottom level transformation; and it allows for generic abstractions from elementary transformations. The feasibility of the architecture is evaluated by applying it to data model evolution.",
	isbn="978-3-540-87875-9"
}

@article{sprinkle2004domain,
	title={A domain-specific visual language for domain model evolution},
	author={Sprinkle, Jonathan and Karsai, Gabor},
	journal={Journal of Visual Languages \& Computing},
	volume={15},
	number={3-4},
	pages={291--307},
	year={2004},
	publisher={Elsevier}
}
@inproceedings{wimmer2010using,
	title={On using inplace transformations for model co-evolution},
	author={Wimmer, Manuel and Kusel, Angelika and Sch{\"o}nb{\"o}ck, Johannes and Retschitzegger, Werner and Schwinger, Wieland and Kappel, Gerti},
	booktitle={Proc. 2nd int. workshop model transformation with atl},
	volume={711},
	pages={65--78},
	year={2010}
}
@InProceedings{10.1007/978-3-642-30476-7_13,
	author="Wagelaar, Dennis
	and Iovino, Ludovico
	and Di Ruscio, Davide
	and Pierantonio, Alfonso",
	editor="Hu, Zhenjiang
	and de Lara, Juan",
	title="Translational Semantics of a Co-evolution Specific Language with the EMF Transformation Virtual Machine",
	booktitle="Theory and Practice of Model Transformations",
	year="2012",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="192--207",
	abstract="Model-to-model transformations are often employed to establish translational semantics of Domain-Specific Languages (DSLs) by mapping high-level models into more concrete ones. Such semantics are also executable when there exists a target platform able to execute the target models. Conceiving a transformation that targets a low-level language still remains arduous due to the large semantic gap between the DSL and the corresponding target language. In this respect, depending on the domain of the DSL, this task can be made easier by reusing an existing platform and bytecode language for that domain, as for instance the EMF Transformation Virtual Machine (EMFTVM) for the domain of model transformation. This paper defines executable semantics for EMFMigrate, a model transformation language specifically designed for managing the coupled evolution in model-driven development. To this end, the approach considers EMFTVM as the runtime engine targeted by the proposed semantic mappings.",
	isbn="978-3-642-30476-7"
}
@InProceedings{10.1007/978-3-642-38883-5_10,
	author="Krause, Christian
	and Dyck, Johannes
	and Giese, Holger",
	editor="Duddy, Keith
	and Kappel, Gerti",
	title="Metamodel-Specific Coupled Evolution Based on Dynamically Typed Graph Transformations",
	booktitle="Theory and Practice of Model Transformations",
	year="2013",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="76--91",
	abstract="A key challenge in model-driven software engineering is the evolution of metamodels and the required effort in migrating their instance models. Even though there already exist both theoretical work and tool support for coupled evolution of metamodels and models, the existing approaches lack expressive power for defining metamodel-specific coupled changes or are too generic to permit assurance of metamodel conformance. In this paper, we devise a mechanism to define and execute coupled evolutions of metamodels and instance models based on graph transformations. We target the Eclipse Modeling Framework (EMF) and achieve the coupling of changes by bridging the conceptual gap between the metamodel and the instance model levels using a wrapper for EMF instance models. Coupled evolutions are then defined by means of dynamically typed graph transformation rules. This specification approach is expressive as it allows the developer to model customized migration rules, which are pivotal for metamodel-specific changes. We present static and run-time consistency checks and show how to decouple the execution of migrations. Our implementation consists of a wrapper package that is used in conjunction with the model transformation tool Henshin.",
	isbn="978-3-642-38883-5"
}
@article{10.1007/s10270-012-0313-5,
	author = {Levendovszky, Tihamer and Balasubramanian, Daniel and Narayanan, Anantha and Shi, Feng and Buskirk, Chris and Karsai, Gabor},
	title = {A semi-formal description of migrating domain-specific models with evolving domains},
	year = {2014},
	issue_date = {May       2014},
	publisher = {Springer-Verlag},
	address = {Berlin, Heidelberg},
	volume = {13},
	number = {2},
	issn = {1619-1366},
	url = {https://doi.org/10.1007/s10270-012-0313-5},
	doi = {10.1007/s10270-012-0313-5},
	abstract = {One of the main advantages of defining a domain-specific modeling language (DSML) is the flexibility to adjust the language definition to changing requirements or in response to a deeper understanding of the domain. With the industrial applications of domain-specific modeling environments, models are valuable investments. If the modeling language evolves, these models must be seamlessly migrated to the evolved DSML. Although the changes stemming from the language evolution are not abrupt in nature, migrating existing models to a new language is still a challenging task. Our solution is the Model Change Language (MCL) tool set, which defines a DSML to describe the migration rules and then performs the model migration automatically. In this paper, we describe the precise semantics of MCL and its execution, along with the confluence of the migration.},
	journal = {Softw. Syst. Model.},
	month = {may},
	pages = {807–823},
	numpages = {17}
}
@article{10.1007/s10270-012-0296-2,
	author = {Rose, Louis M. and Kolovos, Dimitrios S. and Paige, Richard F. and Polack, Fiona A. and Poulding, Simon},
	title = {Epsilon Flock: a model migration language},
	year = {2014},
	issue_date = {May       2014},
	publisher = {Springer-Verlag},
	address = {Berlin, Heidelberg},
	volume = {13},
	number = {2},
	issn = {1619-1366},
	url = {https://doi.org/10.1007/s10270-012-0296-2},
	doi = {10.1007/s10270-012-0296-2},
	abstract = {Model-driven engineering introduces additional challenges for controlling and managing software evolution. Today, tools exist for generating model editors and for managing models with transformation, validation, merging and weaving. There is limited support, however, for model migration--a development activity in which instance models are updated in response to metamodel evolution. In this paper, we propose conservative copy--a style of model transformation that we believe is well-suited to model migration--and Epsilon Flock--a compact model-to-model transformation language tailored for model migration. The proposed structures are evaluated by comparing the conciseness of model migration strategies written in different styles of transformation language, using several examples of evolution taken from UML and the graphical modelling framework.},
	journal = {Softw. Syst. Model.},
	month = {may},
	pages = {735–755},
	numpages = {21},
	keywords = {Metamodel evolution, Model migration, Model transformation}
}

@inproceedings{del2007semi,
	title={Semi-automatic model integration using matching transformations and weaving models},
	author={Del Fabro, Marcos Didonet and Valduriez, Patrick},
	booktitle={Proceedings of the 2007 ACM symposium on Applied computing},
	pages={963--970},
	year={2007}
}
@inproceedings{de2008generating,
	title={Generating version convertors for domain-specific languages},
	author={de Geest, Gerardo and Vermolen, Sander and van Deursen, Arie and Visser, Eelco},
	booktitle={2008 15th Working Conference on Reverse Engineering},
	pages={197--201},
	year={2008},
	organization={IEEE}
}
@inproceedings{garces2009managing,
	title={Managing model adaptation by precise detection of metamodel changes},
	author={Garc{\'e}s, Kelly and Jouault, Fr{\'e}d{\'e}ric and Cointe, Pierre and B{\'e}zivin, Jean},
	booktitle={Model Driven Architecture-Foundations and Applications: 5th European Conference, ECMDA-FA 2009, Enschede, The Netherlands, June 23-26, 2009. Proceedings 5},
	pages={34--49},
	year={2009},
	organization={Springer}
}
@article{meyers2011generic,
	title={A generic in-place transformation-based approach to structured model co-evolution},
	author={Meyers, Bart and Wimmer, Manuel and Cicchetti, Antonio and Sprinkle, Jonathan},
	journal={Electronic Communications of the EASST},
	volume={42},
	year={2011}
}
@article{mantz2013well,
	title={Well-formed model co-evolution with customizable model migration},
	author={Mantz, Florian and Taentzer, Gabriele and Lamo, Yngve},
	journal={Electronic Communications of the EASST},
	year={2013}
}
@inproceedings{anguel2014using,
	title={Using weaving models in metamodel and model co-evolution approach},
	author={Anguel, Fouzia and Amirat, Abdelkrim and Bounour, Nora},
	booktitle={2014 6th International Conference on Computer Science and Information Technology (CSIT)},
	pages={142--147},
	year={2014},
	organization={IEEE}
}
@article{hossler2005coevolution,
	title={Coevolution of models, metamodels and transformations},
	author={H{\"o}{\ss}ler, Joachim and Soden, Michael and Eichler, Hajo and others},
	journal={Models and Human Reasoning},
	pages={129--154},
	year={2005},
	publisher={Wissenschaft und Technik Verlag Berlin}
}
@inproceedings{florez2012coevolution,
	title={Coevolution assistance for enterprise architecture models},
	author={Florez, Hector and S{\'a}nchez, Mario and Villalobos, Jorge and Vega, Germ{\'a}n},
	booktitle={Proceedings of the 6th International Workshop on Models and Evolution},
	pages={27--32},
	year={2012}
}
@article{fernandez2013adapting,
	title={Adapting models in metamodels composition processes},
	author={Fernandez, Hector Arturo Florez and others},
	journal={Revista Vinculos},
	volume={10},
	number={1},
	pages={96--108},
	year={2013}
}
@inproceedings{wachsmuth2007metamodel,
	title={Metamodel adaptation and model co-adaptation},
	author={Wachsmuth, Guido},
	booktitle={European conference on object-oriented programming},
	pages={600--624},
	year={2007},
	organization={Springer}
}
@inproceedings{cicchetti2009managing,
	title={Managing dependent changes in coupled evolution},
	author={Cicchetti, Antonio and Di Ruscio, Davide and Pierantonio, Alfonso},
	booktitle={International Conference on Theory and Practice of Model Transformations},
	pages={35--51},
	year={2009},
	organization={Springer}
}
@inproceedings{van2011generic,
	title={A generic solution for syntax-driven model co-evolution},
	author={Van Den Brand, Mark and Proti{\'c}, Zvezdan and Verhoeff, Tom},
	booktitle={Objects, Models, Components, Patterns: 49th International Conference, TOOLS 2011, Zurich, Switzerland, June 28-30, 2011. Proceedings 49},
	pages={36--51},
	year={2011},
	organization={Springer}
}
@inproceedings{becker2007process,
	title={A process model and classification scheme for semi-automatic meta-model evolution},
	author={Becker, Steffen and Gruschko, Boris and Goldschmidt, Thomas and Koziolek, Heiko},
	booktitle={1st Workshop MDD, SOA und IT-Management (MSI), GI, GiTO-Verlag},
	pages={35--46},
	year={2007}
}
@inproceedings{herrmannsdoerfer2009operation,
	title={Operation-based versioning of metamodels with COPE},
	author={Herrmannsdoerfer, Markus},
	booktitle={2009 ICSE Workshop on Comparison and Versioning of Software Models},
	pages={49--54},
	year={2009},
	organization={IEEE}
}
@inproceedings{wittern2013determining,
	title={Determining the necessity of human intervention when migrating models of an evolved DSL},
	author={Wittern, Hauke},
	booktitle={2013 17th IEEE International Enterprise Distributed Object Computing Conference Workshops},
	pages={209--218},
	year={2013},
	organization={IEEE}
}
@misc{Hebig2017,
	abstract = {Modeling languages, just as all software artifacts, evolve. This poses the risk that legacy models of a company get lost, when they become incompatible with the new language version. To address this risk, a multitude of approaches for metamodel-model co-evolution were proposed in the last 10 years. However, the high number of solutions makes it difficult for practitioners to choose an appropriate approach. In this paper, we present a survey on 31 approaches to support metamodel-model co-evolution. We introduce a taxonomy of solution techniques and classify the existing approaches. To support researchers, we discuss the state of the art, in order to better identify open issues. Furthermore, we use the results to provide a decision support for practitioners, who aim to adopt solutions from research.},
	author = {Hebig, Regina and Khelladi, Djamel Eddine and Bendraou, Reda},
	booktitle = {IEEE Transactions on Software Engineering},
	doi = {10.1109/TSE.2016.2610424},
	file = {:home/zkebaili/.var/app/com.elsevier.MendeleyDesktop/data/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Hebig, Khelladi, Bendraou - 2017 - Approaches to co-evolution of metamodels and models A survey.pdf:pdf},
	issn = {00985589},
	keywords = {Design notations and documentation,Metamodels,Models,Software engineering,Survey},
	mendeley-groups = {MM models coevolution},
	month = {may},
	number = {5},
	pages = {396--414},
	publisher = {Institute of Electrical and Electronics Engineers Inc.},
	title = {{Approaches to co-evolution of metamodels and models: A survey}},
	volume = {43},
	year = {2017}
}

@inproceedings{anguel2013towards,
	title={Towards models and metamodels co-evolution approach},
	author={Anguel, Fouzia and Amirat, Abdelkrim and Bounour, Nora},
	booktitle={2013 11th International Symposium on Programming and Systems (ISPS)},
	pages={163--167},
	year={2013},
	organization={IEEE}
}
@article{demuth2016co,
	title={Co-evolution of metamodels and models through consistent change propagation},
	author={Demuth, Andreas and Riedl-Ehrenleitner, Markus and Lopez-Herrejon, Roberto E and Egyed, Alexander},
	journal={Journal of Systems and Software},
	volume={111},
	pages={281--297},
	year={2016},
	publisher={Elsevier}
}
@article{gomez2014approach,
	title={An approach to the co-creation of models and metamodels in Enterprise Architecture Projects.},
	author={G{\'o}mez, Paola and S{\'a}nchez, Mario E and Florez, Hector and Villalobos, Jorge},
	journal={J. Object Technol.},
	volume={13},
	number={3},
	pages={2--1},
	year={2014}
}
@inproceedings{kessentini2016automated,
	title={Automated metamodel/model co-evolution using a multi-objective optimization approach},
	author={Kessentini, Wael and Sahraoui, Houari and Wimmer, Manuel},
	booktitle={Modelling Foundations and Applications: 12th European Conference, ECMFA 2016, Held as Part of STAF 2016, Vienna, Austria, July 6-7, 2016, Proceedings 12},
	pages={138--155},
	year={2016},
	organization={Springer}
}
@article{kessentini2019automated,
	title={Automated metamodel/model co-evolution: A search-based approach},
	author={Kessentini, Wael and Sahraoui, Houari and Wimmer, Manuel},
	journal={Information and Software Technology},
	volume={106},
	pages={49--67},
	year={2019},
	publisher={Elsevier}
}
@inproceedings{kessentini2020interactive,
	title={Interactive metamodel/model co-evolution using unsupervised learning and multi-objective search},
	author={Kessentini, Wael and Alizadeh, Vahid},
	booktitle={Proceedings of the 23rd ACM/IEEE International Conference on Model Driven Engineering Languages and Systems},
	pages={68--78},
	year={2020}
}
@inproceedings{schonbock2014care,
	title={CARE: a constraint-based approach for re-establishing conformance-relationships},
	author={Sch{\"o}nb{\"o}ck, Johannes and Kusel, Angelika and Etzlstorfer, Juergen and Kapsammer, Elisabeth and Schwinger, Wieland and Wimmer, Manuel and Wischenbart, Martin},
	booktitle={Proceedings of the Tenth Asia-Pacific Conference on Conceptual Modelling-Volume 154},
	pages={19--28},
	year={2014}
}
@INPROCEEDINGS{8101267,
	author={Batot, Edouard and Kessentini, Wael and Sahraoui, Houari and Famelis, Michalis},
	booktitle={2017 ACM/IEEE 20th International Conference on Model Driven Engineering Languages and Systems (MODELS)}, 
	title={Heuristic-Based Recommendation for Metamodel — OCL Coevolution}, 
	year={2017},
	volume={},
	number={},
	pages={210-220},
	keywords={Model driven engineering;Software Engineering;Genetic Pogramming;Coevolution},
	doi={10.1109/MODELS.2017.25}}
	
	@inproceedings{10.1007/978-3-642-41533-3_18,
		author = {Demuth, Andreas and Lopez-Herrejon, Roberto E. and Egyed, Alexander},
		title = {Supporting the Co-evolution of Metamodels and Constraints through Incremental Constraint Management},
		year = {2013},
		isbn = {9783642415326},
		publisher = {Springer-Verlag},
		address = {Berlin, Heidelberg},
		url = {https://doi.org/10.1007/978-3-642-41533-3_18},
		doi = {10.1007/978-3-642-41533-3_18},
		abstract = {Design models must abide by constraints that can come from diverse sources, like metamodels, requirements, or the problem domain. Modelers intent to live by these constraints and thus desire automated mechanism that provide instant feedback on constraint violations. However, typical approaches assume that constraints do not evolve over time, which, unfortunately, is becoming increasingly unrealistic. For example, the co-evolution of metamodels and models requires corresponding constraints to be co-evolved continuously. This demands efficient constraint adaptation mechanisms to ensure that validated constraints are up-to-date. This paper presents an approach based on constraint templates that tackles this evolution scenario by automatically updating constraints. We developed the Cross-Layer Modeler XLM approach which relies on incremental consistency-checking. As a case study, we performed evolutions of the UML-metamodel and 21 design models. Our approach is sound and the empirical evaluation shows that it is near instant and scales with increasing model sizes.},
		booktitle = {Proceedings of the 16th International Conference on Model-Driven Engineering Languages and Systems - Volume 8107},
		pages = {287–303},
		numpages = {17},
		keywords = {metamodeling, consistency-checking, Co-evolution}
	}
	@article{markovic2008refactoring,
		title={Refactoring OCL annotated UML class diagrams},
		author={Markovi{\'c}, Slavi{\v{s}}a and Baar, Thomas},
		journal={Software \& Systems Modeling},
		volume={7},
		pages={25--47},
		year={2008},
		publisher={Springer}
	}
	@inproceedings{hassam2011assistance,
		title={Assistance system for ocl constraints adaptation during metamodel evolution},
		author={Hassam, Kahina and Sadou, Salah and Le Gloahec, Vincent and Fleurquin, R{\'e}gis},
		booktitle={2011 15th European conference on software maintenance and reengineering},
		pages={151--160},
		year={2011},
		organization={IEEE}
	}
	@inproceedings{kusel2014systematic,
		title={A Systematic Taxonomy of Metamodel Evolution Impacts on OCL Expressions.},
		author={Kusel, Angelika and Etzlstorfer, Juergen and Kapsammer, Elisabeth and Langer, Philip and Retschitzegger, Werner and Schoenboeck, Johannes and Schwinger, Wieland and Wimmer, Manuel},
		booktitle={ME@ MoDELS},
		pages={2--11},
		year={2014}
	}
	@inproceedings{cabot2004automatic,
		title={Automatic integrity constraint evolution due to model subtract operations},
		author={Cabot, Jordi and Conesa, Jordi},
		booktitle={Conceptual Modeling for Advanced Application Domains: ER 2004 Workshops CoMoGIS, CoMWIM, ECDM, CoMoA, DGOV, and eCOMO, Shanghai, China, November 8-12, 2004. Proceedings 23},
		pages={350--362},
		year={2004},
		organization={Springer}
	}
	@article{khelladi2017semi,
		title={A semi-automatic maintenance and co-evolution of OCL constraints with (meta) model evolution},
		author={Khelladi, Djamel Eddine and Bendraou, Reda and Hebig, Regina and Gervais, Marie-Pierre},
		journal={Journal of Systems and Software},
		volume={134},
		pages={242--260},
		year={2017},
		publisher={Elsevier}
	}
	@article{mendez2010towards,
		title={Towards transformation migration after metamodel evolution},
		author={Mendez, David and Etien, Anne and Muller, Alexis and Casallas, Rubby},
		journal={Model and Evolution Wokshop},
		year={2010}
	}
	@inproceedings{di2011needed,
		title={What is needed for managing co-evolution in mde?},
		author={Di Ruscio, Davide and Iovino, Ludovico and Pierantonio, Alfonso},
		booktitle={Proceedings of the 2nd International Workshop on Model Comparison in Practice},
		pages={30--38},
		year={2011}
	}
	@article{garces2014adapting,
		title={Adapting transformations to metamodel changes via external transformation composition},
		author={Garc{\'e}s, Kelly and Vara, Juan M and Jouault, Fr{\'e}d{\'e}ric and Marcos, Esperanza},
		journal={Software \& Systems Modeling},
		volume={13},
		pages={789--806},
		year={2014},
		publisher={Springer}
	}
	@inproceedings{kusel2015consistent,
		title={Consistent co-evolution of models and transformations},
		author={Kusel, Angelika and Etzlstorfer, J{\"u}rgen and Kapsammer, Elisabeth and Retschitzegger, Werner and Schwinger, Wieland and Sch{\"o}nb{\"o}ck, Johannes},
		booktitle={2015 ACM/IEEE 18th International Conference on Model Driven Engineering Languages and Systems (MODELS)},
		pages={116--125},
		year={2015},
		organization={IEEE}
	}
	@inproceedings{khelladi2018change,
		title={Change propagation-based and composition-based co-evolution of transformations with evolving metamodels},
		author={Khelladi, Djamel Eddine and Kretschmer, Roland and Egyed, Alexander},
		booktitle={Proceedings of the 21th ACM/IEEE international conference on model driven engineering languages and systems},
		pages={404--414},
		year={2018}
	}
	@inproceedings{garcia2012model,
		title={Model transformation co-evolution: A semi-automatic approach},
		author={Garcia, Jokin and Diaz, Oscar and Azanza, Maider},
		booktitle={International conference on software language engineering},
		pages={144--163},
		year={2012},
		organization={Springer}
	}
	@inproceedings{kessentini2018automated,
		title={Automated co-evolution of metamodels and transformation rules: A search-based approach},
		author={Kessentini, Wael and Sahraoui, Houari and Wimmer, Manuel},
		booktitle={Search-Based Software Engineering: 10th International Symposium, SSBSE 2018, Montpellier, France, September 8-9, 2018, Proceedings 10},
		pages={229--245},
		year={2018},
		organization={Springer}
	}
	@article{10.1145/1932682.1869486,
		author = {Nguyen, Hoan Anh and Nguyen, Tung Thanh and Wilson, Gary and Nguyen, Anh Tuan and Kim, Miryung and Nguyen, Tien N.},
		title = {A Graph-Based Approach to API Usage Adaptation},
		year = {2010},
		issue_date = {October 2010},
		publisher = {Association for Computing Machinery},
		address = {New York, NY, USA},
		volume = {45},
		number = {10},
		issn = {0362-1340},
		url = {https://doi.org/10.1145/1932682.1869486},
		doi = {10.1145/1932682.1869486},
		abstract = {Reusing existing library components is essential for reducing the cost of software development and maintenance. When library components evolve to accommodate new feature requests, to fix bugs, or to meet new standards, the clients of software libraries often need to make corresponding changes to correctly use the updated libraries. Existing API usage adaptation techniques support simple adaptation such as replacing the target of calls to a deprecated API, however, cannot handle complex adaptations such as creating a new object to be passed to a different API method, or adding an exception handling logic that surrounds the updated API method calls.This paper presents LIBSYNC that guides developers in adapting API usage code by learning complex API usage adaptation patterns from other clients that already migrated to a new library version (and also from the API usages within the library's test code). LIBSYNC uses several graph-based techniques (1) to identify changes to API declarations by comparing two library versions, (2) to extract associated API usage skeletons before and after library migration, and (3) to compare the extracted API usage skeletons to recover API usage adaptation patterns. Using the learned adaptation patterns, LIBSYNC recommends the locations and edit operations for adapting API usages. The evaluation of LIBSYNC on real-world software systems shows that it is highly correct and useful with a precision of 100\% and a recall of 91\%.},
		journal = {SIGPLAN Not.},
		month = {oct},
		pages = {302–321},
		numpages = {20},
		keywords = {software evolution, API evolution, API usage adaptation, API usage model, program differencing}
	}
	@book{stahl2006model,
		title={Model-driven software development: technology, engineering, management},
		author={Stahl, Thomas and V{\"o}lter, Markus and Czarnecki, Krzysztof},
		year={2006},
		publisher={John Wiley \& Sons, Inc.}
	}
	
	@article{wortmann2020modeling,
		title={Modeling languages in Industry 4.0: an extended systematic mapping study},
		author={Wortmann, Andreas and Barais, Olivier and Combemale, Benoit and Wimmer, Manuel},
		journal={Software and Systems Modeling},
		volume={19},
		pages={67--94},
		year={2020},
		publisher={Springer}
	}
	@inproceedings{gruschko2007towards,
		title={Towards synchronizing models with evolving metamodels},
		author={Gruschko, Boris and Kolovos, Dimitrios and Paige, Richard},
		booktitle={Proceedings of the International Workshop on Model-Driven Software Evolution},
		pages={3},
		
		year={2007},
		organization={Amsterdam, Netherlands}
	}
	
	@article{dig2006apis,
		title={How do APIs evolve? A story of refactoring},
		author={Dig, Danny and Johnson, Ralph},
		journal={Journal of software maintenance and evolution: Research and Practice},
		volume={18},
		number={2},
		pages={83--107},
		year={2006},
		publisher={Wiley Online Library}
	}
	@INPROCEEDINGS{10043250,
		author={Zaitsev, Oleksandr and Ducasse, Stéphane and Anquetil, Nicolas and Thiefaine, Arnaud},
		booktitle={2022 29th Asia-Pacific Software Engineering Conference (APSEC)}, 
		title={How Libraries Evolve: A Survey of Two Industrial Companies and an Open-Source Community}, 
		year={2022},
		volume={},
		number={},
		pages={309-317},
		keywords={Software libraries;Companies;Libraries;Software;Faces;library evolution;library update;survey;software engineering;software reuse;breaking changes},
		doi={10.1109/APSEC57359.2022.00043}}
		 @inproceedings{ren2004chianti,
			title={Chianti: a tool for change impact analysis of java programs},
			author={Ren, Xiaoxia and Shah, Fenil and Tip, Frank and Ryder, Barbara G and Chesley, Ophelia},
			booktitle={Proceedings of the 19th annual ACM SIGPLAN conference on Object-oriented programming, systems, languages, and applications},
			pages={432--448},
			year={2004}
		}
	 @techreport{urma2017programming,
		title={Programming language evolution},
		author={Urma, Raoul-Gabriel},
		year={2017},
		institution={University of Cambridge, Computer Laboratory}
	}
	@article{dietrich2016java,
		title={What Java developers know about compatibility, and why this matters},
		author={Dietrich, Jens and Jezek, Kamil and Brada, Premek},
		journal={Empirical Software Engineering},
		volume={21},
		pages={1371--1396},
		year={2016},
		publisher={Springer}
	}
	@book{arnold1996software,
		title={Software change impact analysis},
		author={Arnold, Robert S},
		year={1996},
		publisher={IEEE Computer Society Press}
	}

	}
	@inproceedings{ryder2001change,
		title={Change impact analysis for object-oriented programs},
		author={Ryder, Barbara G and Tip, Frank},
		booktitle={Proceedings of the 2001 ACM SIGPLAN-SIGSOFT workshop on Program analysis for software tools and engineering},
		pages={46--53},
		year={2001}
	}
	@inproceedings{schuts2021industrial,
		title={Industrial experiences with the evolution of a DSL},
		author={Schuts, Mathijs and Alonso, Marco and Hooman, Jozef},
		booktitle={Proceedings of the 18th ACM SIGPLAN International Workshop on Domain-Specific Modeling},
		pages={21--30},
		year={2021}
	}
	@inproceedings{mengerink2016dsl,
		title={DSL/Model Co-Evolution in Industrial EMF-Based MDSE Ecosystems.},
		author={Mengerink, Josh and Schiffelers, Ramon RH and Serebrenik, Alexander and van den Brand, Mark},
		booktitle={ME@ MoDELS},
		pages={2--7},
		year={2016}
	}
	@inproceedings{favre2005languages,
		title={Languages evolve too! changing the software time scale},
		author={Favre, J-M},
		booktitle={Eighth International Workshop on Principles of Software Evolution (IWPSE'05)},
		pages={33--42},
		year={2005},
		organization={IEEE}
	}
	@incollection{herrmannsdorfer2013coupled,
		title={Coupled evolution of software metamodels and models},
		author={Herrmannsd{\"o}rfer, Markus and Wachsmuth, Guido},
		booktitle={Evolving Software Systems},
		pages={33--63},
		year={2013},
		publisher={Springer}
	}
	@InProceedings{10.1007/978-3-642-12107-4_3,
		author="Herrmannsdoerfer, Markus
		and Ratiu, Daniel
		and Wachsmuth, Guido",
		editor="van den Brand, Mark
		and Ga{\v{s}}evi{\'{c}}, Dragan
		and Gray, Jeff",
		title="Language Evolution in Practice: The History of GMF",
		booktitle="Software Language Engineering",
		year="2010",
		publisher="Springer Berlin Heidelberg",
		address="Berlin, Heidelberg",
		pages="3--22",
		abstract="In consequence of changing requirements and technological progress, software languages are subject to change. The changes affect the language's specification, which in turn affects language processors as well as existing language utterances. Unfortunately, little is known about how software languages evolve in practice. This paper presents a case study on the evolution of four modeling languages provided by the Graphical Modeling Framework. It investigates the following research questions: (1) What is the impact of language changes on related software artifacts?, (2) What activities are performed to implement language changes? and (3) What kinds of adaptations capture the language changes? We found out that the language changes affect various kinds of related artifacts; the distribution of the activities performed to evolve the languages mirrors the classical software maintenance activities, and most language changes can be captured by a small suite of operators that can also be used to migrate the language utterances.",
		isbn="978-3-642-12107-4"
	}
	@INPROCEEDINGS{5279907,
		author={Lammel, Ralf and Zaytsev, Vadim},
		booktitle={2009 Ninth IEEE International Working Conference on Source Code Analysis and Manipulation}, 
		title={Recovering Grammar Relationships for the Java Language Specification}, 
		year={2009},
		volume={},
		number={},
		pages={178-186},
		keywords={Java;Convergence;Computer bugs;Scalability;Reproducibility of results;Computer languages;Embedded software;Best practices;Binary trees;Sun},
		doi={10.1109/SCAM.2009.29}}
	
@inproceedings{ivanov2002technological,
	title={Technological spaces: An initial appraisal},
	author={Ivanov, Ivan and B{\'e}zivin, Jean and Aksit, Mehmet},
	booktitle={4th International Symposium on Distributed Objects and Applications, DOA 2002},
	year={2002}
}
@article{favre2003meta,
	title={Meta-model and model co-evolution within the 3D software space},
	author={Favre, Jean-Marie},
	journal={ELISA},
	volume={3},
	pages={98--109},
	year={2003}
}
	@book{lammel2001format,
		title={Format evolution},
		author={Lammel, Ralf and Lohmann, Wolfgang},
		year={2001},
		publisher={Citeseer}
	}
	@article{meyer1996schema,
		title={Schema evolution: Concepts, terminology, and solutions},
		author={Meyer, Bertrand},
		journal={Computer},
		volume={29},
		number={10},
		pages={119--121},
		year={1996},
		publisher={IEEE}
	}
	@article{flouris2008ontology,
		title={Ontology change: classification and survey},
		author={Flouris, Giorgos and Manakanatas, Dimitris and Kondylakis, Haridimos and Plexousakis, Dimitris and Antoniou, Grigoris},
		journal={The Knowledge Engineering Review},
		volume={23},
		number={2},
		pages={117--152},
		year={2008},
		publisher={Cambridge university press}
	}
	@INPROCEEDINGS{7332471,
		author={Hora, André and Robbes, Romain and Anquetil, Nicolas and Etien, Anne and Ducasse, Stéphane and Tulio Valente, Marco},
		booktitle={2015 IEEE International Conference on Software Maintenance and Evolution (ICSME)}, 
		title={How do developers react to API evolution? The Pharo ecosystem case}, 
		year={2015},
		volume={},
		number={},
		pages={251-260},
		keywords={Ecosystems;Open source software;Context;History;Computer science;Association rules},
		doi={10.1109/ICSM.2015.7332471}}
	$@phdthesis{zaytsev:tel-03998632,
		TITLE = {{Data Mining-based tools to support library update}},
		AUTHOR = {Zaytsev, Oleksandr},
		URL = {https://theses.hal.science/tel-03998632},
		NUMBER = {2022ULILB028},
		SCHOOL = {{Universit{\'e} de Lille}},
		YEAR = {2022},
		MONTH = Oct,
		KEYWORDS = {Software Evolution ; Library Update ; Library Migration ; Data Mining ; Artificial Intelligence ; Software Engineering ; {\'E}volution Logicielle ; Mise {\`a} jour des biblioth{\`e}ques},
		TYPE = {Theses},
		PDF = {https://theses.hal.science/tel-03998632/file/These_ZAYTSEV_Oleksandr.pdf},
		HAL_ID = {tel-03998632},
		HAL_VERSION = {v1},
	}
	@article{10.1007/s10664-021-10052-y,
		author = {Ochoa, Lina and Degueule, Thomas and Falleri, Jean-R\'{e}my and Vinju, Jurgen},
		title = {Breaking bad? Semantic versioning and impact of breaking changes in Maven Central: An external and differentiated replication study},
		year = {2022},
		issue_date = {May 2022},
		publisher = {Kluwer Academic Publishers},
		address = {USA},
		volume = {27},
		number = {3},
		issn = {1382-3256},
		url = {https://doi.org/10.1007/s10664-021-10052-y},
		doi = {10.1007/s10664-021-10052-y},
		abstract = {Just like any software, libraries evolve to incorporate new features, bug fixes, security patches, and refactorings. However, when a library evolves, it may break the contract previously established with its clients by introducing Breaking Changes (BCs) in its API. These changes might trigger compile-time, link-time, or run-time errors in client code. As a result, clients may hesitate to upgrade their dependencies, raising security concerns and making future upgrades even more difficult. Understanding how libraries evolve helps client developers to know which changes to expect and where to expect them, and library developers to understand how they might impact their clients. In the most extensive study to date, Raemaekers et al. investigate to what extent developers of Java libraries hosted on the Maven Central Repository (MCR) follow semantic versioning conventions to signal the introduction of BCs and how these changes impact client projects. Their results suggest that BCs are widespread without regard for semantic versioning, with a significant impact on clients. In this paper, we conduct an external and differentiated replication study of their work. We identify and address some limitations of the original protocol and expand the analysis to a new corpus spanning seven more years of the MCR. We also present a novel static analysis tool for Java bytecode, Maracas, which provides us with: (i) the set of all BCs between two versions of a library, and; (ii) the set of locations in client code impacted by individual BCs. Our key findings, derived from the analysis of 119,879 library upgrades and 293,817 clients, contrast with the original study and show that 83.4\% of these upgrades do comply with semantic versioning. Furthermore, we observe that the tendency to comply with semantic versioning has significantly increased over time. Finally, we find that most BCs affect code that is not used by any client, and that only 7.9\% of all clients are affected by BCs. These findings should help (i) library developers to understand and anticipate the impact of their changes; (ii) library users to estimate library upgrading effort and to pick libraries that are less likely to break, and; (iii) researchers to better understand the dynamics of library-client co-evolution in Java.},
		journal = {Empirical Softw. Engg.},
		month = {may},
		numpages = {42},
		keywords = {Maven Central, Backwards compatibility, Breaking changes, API evolution, Software evolution}
	}
	
	@article{LIU2021110817,
		title = {A critical review on the evaluation of automated program repair systems},
		journal = {Journal of Systems and Software},
		volume = {171},
		pages = {110817},
		year = {2021},
		issn = {0164-1212},
		doi = {https://doi.org/10.1016/j.jss.2020.110817},
		url = {https://www.sciencedirect.com/science/article/pii/S0164121220302156},
		author = {Kui Liu and Li Li and Anil Koyuncu and Dongsun Kim and Zhe Liu and Jacques Klein and Tegawendé F. Bissyandé},
		keywords = {Automated program repair, Evaluation, Assessment, Metrics},
		abstract = {Automated Program Repair (APR) has attracted significant attention from software engineering research and practice communities in the last decade. Several teams have recorded promising performance in fixing real bugs and there is a race in the literature to fix as many bugs as possible from established benchmarks. Gradually, repair performance of APR tools in the literature has gone from being evaluated with a metric on the number of generated plausible patches to the number of correct patches. This evolution is necessary after a study highlighting the overfitting issue in test suite-based automatic patch generation. Simultaneously, some researchers are also insisting on providing time cost in the repair scenario as a metric for comparing state-of-the-art systems. In this paper, we discuss how the latest evaluation metrics of APR systems could be biased. Since design decisions (both in approach and evaluation setup) are not always fully disclosed, the impact on repair performance is unknown and computed metrics are often misleading. To reduce notable biases of design decisions in program repair approaches, we conduct a critical review on the evaluation of patch generation systems and propose eight evaluation metrics for fairly assessing the performance of APR tools. Eventually, we show with experimental data on 11 baseline program repair systems that the proposed metrics allow to highlight some caveats in the literature. We expect wide adoption of these metrics in the community to contribute to boosting the development of practical, and reliably performable program repair tools.}
	}
	
	@INPROCEEDINGS {10638555,
		author = {H. Ruan and H. Nguyen and R. Shariffdeen and Y. Noller and A. Roychoudhury},
		booktitle = {2024 IEEE Conference on Software Testing, Verification and Validation (ICST)},
		title = {Evolutionary Testing for Program Repair},
		year = {2024},
		volume = {},
		issn = {2159-4848},
		pages = {105-116},
		abstract = {Automated program repair (APR) allows for au-tonomous software protection and improvement. Many proposed repair techniques rely on available test suites, since tests are available in real-world settings. Tests are incomplete specifications, however. As a result, repairs generated based on tests may suffer from the test overfitting problem. The patches produced by APR techniques may pass the given tests and thus be plausible, and yet be an incorrect patch. This hints towards more extensive test suites to guide program repair. Generating additional tests to improve the test suite quality is generally difficult because the oracle or expected observable behavior of the generated tests is unknown. In our work, we first construct additional oracles by instrumenting buggy programs from the Defects4j benchmark with the knowledge obtained from the available bug reports. Then, we formulate a coevolution approach that generates tests and repairs in a unified workflow. The complete workflow is implemented as an extension of the well-known Java testing framework Evosuite. This includes re-purposing the search in Evosuite to search for repairs (instead of searching for tests) and enables an easy adoption for developers who are already familiar with Evosuite for test suite generation. The evaluation of our tool EvoREPAIR shows that coevolution positively impacts the quality of patches and tests. In the future, we hope that such coevolution can inspire new repair tools and techniques.},
		keywords = {software testing;java;software protection;instruments;computer bugs;maintenance engineering;software},
		doi = {10.1109/ICST60714.2024.00058},
		url = {https://doi.ieeecomputersociety.org/10.1109/ICST60714.2024.00058},
		publisher = {IEEE Computer Society},
		address = {Los Alamitos, CA, USA},
		month = {may}
	}
	@article{roziere2021leveraging,
		title={Leveraging automated unit tests for unsupervised code translation},
		author={Roziere, Baptiste and Zhang, Jie M and Charton, Francois and Harman, Mark and Synnaeve, Gabriel and Lample, Guillaume},
		journal={arXiv preprint arXiv:2110.06773},
		year={2021}
	}
	
	@inproceedings{soares2009generating,
		title={Generating unit tests for checking refactoring safety},
		author={Soares, Gustavo and Gheyi, Rohit and Massoni, Tiago and Corn{\'e}lio, M{\'a}rcio and Cavalcanti, Diego},
		booktitle={Brazilian Symposium on Programming Languages},
		volume={1175},
		pages={159--172},
		year={2009}
	}
	@INPROCEEDINGS{9425945,
		author={Wang, Sinan and Wen, Ming and Liu, Yepang and Wang, Ying and Wu, Rongxin},
		booktitle={2021 IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)}, 
		title={Understanding and Facilitating the Co-Evolution of Production and Test Code}, 
		year={2021},
		volume={},
		number={},
		pages={272-283},
		keywords={Java;Conferences;Semantics;Production;Machine learning;Syntactics;Feature extraction;Software evolution;test maintenance;mining software repositories},
		doi={10.1109/SANER50967.2021.00033}}
	
	@article{ZHANG201312,
		title = {Formalization and Verification of Behavioral Correctness of Dynamic Software Updates},
		journal = {Electronic Notes in Theoretical Computer Science},
		volume = {294},
		pages = {12-23},
		year = {2013},
		note = {Proceedings of the 2013 Validation Strategies for Software Evolution (VSSE) Workshop},
		issn = {1571-0661},
		doi = {https://doi.org/10.1016/j.entcs.2013.02.013},
		url = {https://www.sciencedirect.com/science/article/pii/S1571066113000157},
		author = {Min Zhang and Kazuhiro Ogata and Kokichi Futatsugi},
		keywords = {dynamic software updating, algebraic specification, verification, behavioral property},
		abstract = {Dynamic Software Updating (DSU) is a technique of updating running software systems on-the-fly. Whereas there are some studies on the correctness of dynamic updating, they focus on how to deploy updates correctly at the code level, e.g., if procedures refer to the data of correct types. However, little attention has been paid to the correctness of the dynamic updating at the behavior level, e.g., if systems after being updated behave as expected, and if unexpected behaviors can never occur. We present an algebraic methodology of specifying dynamic updates and verifying their behavioral correctness by using off-the-shelf theorem proving and model checking tools. By theorem proving we can show that systems after being updated indeed satisfy their desired properties, and by model checking we can detect potential errors. Our methodology is general in that: (1) it can be applied to three updating models that are mainly used in current DSU systems; and (2) it is not restricted to dynamic updates for certain programming models.}
	}
	@article{LIU2021110817,
		title = {A critical review on the evaluation of automated program repair systems},
		journal = {Journal of Systems and Software},
		volume = {171},
		pages = {110817},
		year = {2021},
		issn = {0164-1212},
		doi = {https://doi.org/10.1016/j.jss.2020.110817},
		url = {https://www.sciencedirect.com/science/article/pii/S0164121220302156},
		author = {Kui Liu and Li Li and Anil Koyuncu and Dongsun Kim and Zhe Liu and Jacques Klein and Tegawendé F. Bissyandé},
		keywords = {Automated program repair, Evaluation, Assessment, Metrics},
		abstract = {Automated Program Repair (APR) has attracted significant attention from software engineering research and practice communities in the last decade. Several teams have recorded promising performance in fixing real bugs and there is a race in the literature to fix as many bugs as possible from established benchmarks. Gradually, repair performance of APR tools in the literature has gone from being evaluated with a metric on the number of generated plausible patches to the number of correct patches. This evolution is necessary after a study highlighting the overfitting issue in test suite-based automatic patch generation. Simultaneously, some researchers are also insisting on providing time cost in the repair scenario as a metric for comparing state-of-the-art systems. In this paper, we discuss how the latest evaluation metrics of APR systems could be biased. Since design decisions (both in approach and evaluation setup) are not always fully disclosed, the impact on repair performance is unknown and computed metrics are often misleading. To reduce notable biases of design decisions in program repair approaches, we conduct a critical review on the evaluation of patch generation systems and propose eight evaluation metrics for fairly assessing the performance of APR tools. Eventually, we show with experimental data on 11 baseline program repair systems that the proposed metrics allow to highlight some caveats in the literature. We expect wide adoption of these metrics in the community to contribute to boosting the development of practical, and reliably performable program repair tools.}
	}